#!/usr/bin/env python3

import os
import pandas as pd
import json
from bs4 import BeautifulSoup
from yaspin import yaspin
import yaml
import math
import json
import logging
import time
import util
from util import createSession,month_to_text,readExcelFile
import yaml
import re
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import requests
import concurrent.futures
import sys
from urllib.parse import unquote

from csv import DictWriter

# session=createSession()
maxWorkerCount=100
file_path = 'config/barnes.json'

with open(file_path, 'r') as file:
    config_data = json.load(file)

# Now you can access your cookies as a dictionary
cookies = config_data['source']['request']['cookies']
period=config_data['source']['period']
base_url=config_data['source']['base_url']
base_path=config_data['target']['directoryMetadata']['sharepointBasePath']
instance=config_data['source']['instance']
logging.basicConfig(filename=f'{base_path}/{instance}/script.log', filemode='a', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def getfileElements(htmlcontent):
    input_elements = util.find_elements_containing_id_values(htmlcontent,'input',['imgHasDocuments','ibDocsGridOpen'])
    filesList=[]
    for element in input_elements:
        if element and 'onclick' in element.attrs:
            onclick_attribute = element.attrs['onclick']
            location_href = onclick_attribute.split("location.href='")[1].split("';")[0]
            filesList.append(location_href)
    return filesList

def extract_info_from_html(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')

    # Find all tables
    tables = soup.find_all('table', {'id': 'ctl00_ctl00_contentBody_cphMain_Documents1_docsGrid_ctl00'})

    # List to store each dataframe
    dfs = []

    for table in tables:
        # Extract the table headers
        headers = []
        for th in table.find_all('th'):
            headers.append(th.text.strip().replace(" ", "_"))

        # Extract the rows
        rows = []
        for tr in table.find_all('tr'):
            row = []
            for td in tr.find_all('td'):
                # Check for input element with specific id
                input_element = td.find('input', id=lambda x: x and (x.endswith('imgHasDocuments') or x.endswith('ibDocsGridOpen')))
                if input_element and 'onclick' in input_element.attrs:
                    onclick_attribute = input_element.attrs['onclick']
                    location_href = onclick_attribute.split("location.href='")[1].split("';")[0]
                    row.append(location_href)
                else:
                    row.append(td.text.strip())

            if row:
                # Adjust rows to have the same number of columns as headers
                while len(row) < len(headers):
                    row.append(None)  # Append None for missing data
                rows.append(row)

        # Create a DataFrame
        df = pd.DataFrame(rows, columns=headers)
        dfs.append(df)

    # Now 'dfs' contains a dataframe for each table
    # for df in dfs:
    #     print(df)
    return dfs

def change_period(url_postfix,periodId):
    cookies = {
    'BLSIAPPEN': '!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==',
    '__AntiXsrfToken': '9f1ed8ac955d48c287beb6e63c79adbf',
    '__RequestVerificationToken': '7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81',
    'ASP.NET_SessionId': 'u23dayhekpus035ygqvkzi5d',
    'FedAuth': '77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctNjU5MDFCOTJEOUREODEzRUJGMEExRThBMkI3MDRGRTYiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6NDg0Y2Y4OGEtODA2Zi00NjAyLWJhMmUtMzgxODdjMzJmNWE2PC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFFS3JQZDZ4bVN5NFhKWGJoUkh5c2hSNDlEdmJLVnBSM3M1aHpKZVlCaGJKRVo1RzhudHg4K3Zmc1lLNlUyaXBhdFVZZXRJZi9TZmN0WlBjWFRMdmEvT1pGSEV6cHpyZVhMR0taS1JmMFFodzVaSXA1WHRjVUM0T0d1SzJqOUUwZnpZWE9lUVhKaUg2NHVuWVBkYS9HczJOellTN1ZDaWJxaU1teTFrNU8xUzRWMFFIcDF3S2d2L2JJWVBmbnJpSjhQc1BNeVpwWVpOM1lIb2ZlWnJKQnVqQ1I5dzRHRks5eUJPeDh4dFhDZTNXclVoZ1FFWm5xK0t3aW5rQ21vRTFnc1RsSGFCYWUyQ3dkd200dzVUbi8vR1NhSzVGWmg1VGF3VytMc3Z5N25MdmJxUWZSdGlmaDFnYXBBOTlwTGs0YTBHMU82WVljeVAzbmkvZDhQL0hXZzI1QXpnanZka0Q4WWRoUVZjNGFVNTlCcTNNYXVBc1FZMStRWDFubmo1ZVVxa3dHNEJqMGN2cFdpNjB0NzJsM0J0MThybDZRdXQ4YmhFeUVhejI0VnV4UVB3T2JLOWM0YVVoMzZueW1pWm1OYTkwVVhzNzF0RmZFeW1TWG5SQ3JTUUN4aUtxWkZFZVVUb1VmN2E5UU9qTWtTeDZ5QithVWRwcUYwUXhJbDFWMGtwR2JjcWVnVHd6RnFPOXI5Y0E2KzlieHVnNG9ld3k1RjIwQ3VNekRwYmlYWTJIYzBqOEVLMkRLaUkzODlkZ3JRZXU4TVM4b09KTHdrTFFpQi81endxOVdJN0tLd3lRd3Rrb3VGMUZFUUVheGVmQThORXQxMTRUT21HcXowejA1bzN0TFRuNzh6eFNmUzFIbExTSVhGcEM0L083VkkzNnA0bU9oSmJKTEMyTkx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQXNHbk1DV21YMDluaE0zaFdoYzNOMThXbEJubzVNMWY0T3NTRlZmTEhQdFNoWHJwaUhlcUpLV3hGcEVqUTloVUd2UVI2ZTNRcDJ2TXYvenNQbGJNSktOR0syMUxYZHhSWDBLaDhFdjNKNW1EWnVGaDNHbXlhVjdieURJVE16T3JxOEpuWUpKVVhSMzZWNHZhYjhBQTJUZlFRVC9jNFBKM0FIcmJnNGk5bDBWaVRrK3FGdWQvZVNLc2JXaUdoR045V0NTUzd6bWRLRHpaZ3dhNWFHSDV3cHBSUFpGcUEyQUIwTnFVakIwMUcyZ3E1S2hHMVkrZ0dlSVl2STNzTmduZmZiTnJQcGJDbGhFQ085MWZJMnZnWDNuSnBpaE0yYTY4L1BKWDJuQlpCdVZDeFpteGlRcDZUZ2Z4eGNBQ3pNdG9jNWNk',
    'FedAuth1': 'VmlJc2ZOMWV4M0FpS1ZCajlwQS80Umkxb3VYa1VpbnBQSkpGSTRFV3Zibzg1YnVQcnFuQVJIazBDM1YvcStRWmo5ZjlKTDgrblIxY1BNb0padjFCcXVQbThxWlgvWFg1TE93Z3R3dG5tcnN0SHNUcERkOVBjcStRSW15V012Uk45Y2kvekZraC9yQVdBbWd4N3RjOGEwbHdNZ1hacWprdHlVeDVtRWF1L0xCT2hSckY4V29FNzRFU21Mc0lZY2Y3ZzA3ZExxaDllRnhLQmNOVDZxbHlPQ1pyeDl6SGJqRUczRnM4Ym1jRUt6Y0pSS0tZT2R0RXNueHFJZ1puYmFwNS9OV2RmRmljYXRkY1ZSNURMOFJHbC9aY3JCNyticXpRVW1Yd3l1M0Y4SDBDMWV3bnNtQStmdTM4WWZUSDRKVUpMVmlqalJUOXc0UThkREdYSHNrdHcvODN4VHcwYzNseHd1WVA3TXhMUUFnQUFEdENZejAwalZMVnpiR0FDaDZjT0ZtRzlhenJ1dU5qWjRQSkR4ay84OGE4SzlVc3ZDTE1JTTcraTJaR3NhdFo3ZDNBVlV1V0ZOOGNRSkZrZDZPVmdGVkpOaURBMzBLVFUwVFZObVMyUVFCd0J0ZTdqQ0xhYVhTaGdGcWxSbXYwVEtxOEZyYkl2WVQ3cTVocmRtNDFSam1LKzFDcHJhdVQ5WnRxd1FuZVoxWjR6R3VkSjZhbTNDVFNWamxsMUx0MHFoc1ozV1pwcnRTMFphUWt2OVhBMzNLU29UcGVBa3ZzTGxJWmJkdW85MmgyWnRtb2FoNkpWUGFNekRhTFhKSDQxS0VlZ09KQlBtSmVLc09hYkN4MTVNcmcyak14Njd1WjJrdHU3THNxbW44bDdMSHB5L01uQlFsUFZzMnI1UXVJZElQZUduaGN6Z0pTV3lwcVdFdnNtR0tiZzU4MVhVMHlQYWp2OHV0ZWRBTWFIL2FYT3ZmV25qRGhOV3E1U2prQ0d1RWFNSDEvVmpqYlVIWFpTRG1kdUZJeFFhbCtCRTVVWGhIakJXUERraXV0MndMOHpSSWxGYkNldXpzYU95cEVBcU5CVWxNMDJQSDY3QXJjMFk4UkdsNGdDa2NnWTEvb1JHb2ZQSEJCZHg2bklwc1NpZEdudEljLzQ4SjNZam5aRFZ1WHFBWjBIMGVDOTdocFFhZmF5WFB4elBLbFJnZUNNWW1BL2EraXdDZGNtaG1UTW4vYTByYXBJeS85RW9TaVN5Y1c3VE5RV2I5c0hsVUtuWkNyRnZFcVZ2cjMwN3NRV2VYeFlQV2hPN0syK09Zd0dBc3B3RWd5TE0zS0krZkJpUlVwNWcwakdMU2hjMy9tSlpQSzFXcUcySi9rMlZXYkRMNzZJR1lzNGViSHNwQ2p3Skg3bEtBSkk0RDltSWozTEZSRm5PWVcwS0h1NGFtREdhYlFsZ1c1Uml0NmJhUDlva2VYNWhxamVpc2piM3ZYQkUrZ3ZPbHZzTFdpTkJYZGxabzlqV1E2cGVrMUtER1g3VkxvMXdybURjYitqL2x3bjRTcEtjN2RmUklaVkxvanEwUnF0ckhYbDdLMW5BNW5paHZvUTZYVUJQZjVrZkRhbm43Z01qVlphRi81dm1aNkR0aitVdGdId1lONzRvV3FsTFRlSllMRE5xcmNkdTJDNVR2VFNFV0tXaTMvOHFpbWZnS2pNakFwU2k5M1dpbmpmQkFWMmsrK1hKWmNCWjVDaEtmbWgvZk1YUXVuNHVEcU48L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==',
    '.BLSIAUTH_711': '5CF8263A780DC79AFCE1DE9ED396B521F19E593FA178E45C673502965B372FD69E5B6B87B0B491B6272C16F5467BBD2E73B4963035BA5B938805EDD07249BE4B19802B431DF6E11D292A1FA6FAD2B8B2156A90C8FAFCDAA7C9CAA3B698D8FA304B25CCD606C6FF267DC5A3659673A8B1615DD53AB20CF81149B77714387193DEF9A8A339B73E3EDBA13FA77DE90042CD9301DAE7F8E495C80BBB1D0FC09748B6F95B57D833890BBF39AAA17A011CB9C734E1F5396D00B4F7EC05A1F3814D9EDD26AA52D62B60A7344D6540103130864A0CAB927934F6A3D33CA01152998D4396FC6810FBD470E9E147E8AC2C3FC76113D79927E05F946C665242E40044E207E543414D86B3B76D25C22A4CD504CE25B24876D39514258376810889B04EC3EB92557970A504C2BDB35689DFA225294D3033B05B83526EF798034396F60D71B7DB15D9F731AC9674BD0115A9076A9F160CE8922A0D680CF98414FBE6D1719E415E301CC378',
    '.MIXEDAUTH': '1A16D9D18506428703FED7E4BB08161AC69AB1C92FB5DC712A1CF672AF1A1006841849552115B6F898CE48A41CD57269E73CD26D9DE27CF93C0AE6FC70979F3A1D0CBB01AF9965E8334CF06EE8B6E99A31BF15BE424ED88C53E9F1937EE30731A9EF42C349300E677612256ACD2640418017CF0CED08EEB3A9FB11A17D60D3AAABDB8174D9B73F6D534F277175FFBF0304FD2F102FE10EDF2EEFBE86389523E48A8ED99648B728280E7CAB1A7C58FA22ADAFDF9C481E8A1AC5F6E1755DFC9FEEDF205A79938C92235C8D1CBEC5573165E1CA8FF78A18B09BE6EE58BA074E5D26D4697B0E46E9FF0FF26ED0D165A941FAB5F881C355CED3E555EFA5C5451D546865ECC2688EEB5ACD3B826A46707EF14B9FF20422B4B1AC98E310916865AE0CFE70C3ED8F83E88B725822D124A1902070F9749E19AE402BF85E9FBC1547FA419C2680B177',
    }

    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        # 'Cookie': 'BLSIAPPEN=!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==; __AntiXsrfToken=9f1ed8ac955d48c287beb6e63c79adbf; __RequestVerificationToken=7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81; ASP.NET_SessionId=u23dayhekpus035ygqvkzi5d; FedAuth=77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctNjU5MDFCOTJEOUREODEzRUJGMEExRThBMkI3MDRGRTYiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6NDg0Y2Y4OGEtODA2Zi00NjAyLWJhMmUtMzgxODdjMzJmNWE2PC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFFS3JQZDZ4bVN5NFhKWGJoUkh5c2hSNDlEdmJLVnBSM3M1aHpKZVlCaGJKRVo1RzhudHg4K3Zmc1lLNlUyaXBhdFVZZXRJZi9TZmN0WlBjWFRMdmEvT1pGSEV6cHpyZVhMR0taS1JmMFFodzVaSXA1WHRjVUM0T0d1SzJqOUUwZnpZWE9lUVhKaUg2NHVuWVBkYS9HczJOellTN1ZDaWJxaU1teTFrNU8xUzRWMFFIcDF3S2d2L2JJWVBmbnJpSjhQc1BNeVpwWVpOM1lIb2ZlWnJKQnVqQ1I5dzRHRks5eUJPeDh4dFhDZTNXclVoZ1FFWm5xK0t3aW5rQ21vRTFnc1RsSGFCYWUyQ3dkd200dzVUbi8vR1NhSzVGWmg1VGF3VytMc3Z5N25MdmJxUWZSdGlmaDFnYXBBOTlwTGs0YTBHMU82WVljeVAzbmkvZDhQL0hXZzI1QXpnanZka0Q4WWRoUVZjNGFVNTlCcTNNYXVBc1FZMStRWDFubmo1ZVVxa3dHNEJqMGN2cFdpNjB0NzJsM0J0MThybDZRdXQ4YmhFeUVhejI0VnV4UVB3T2JLOWM0YVVoMzZueW1pWm1OYTkwVVhzNzF0RmZFeW1TWG5SQ3JTUUN4aUtxWkZFZVVUb1VmN2E5UU9qTWtTeDZ5QithVWRwcUYwUXhJbDFWMGtwR2JjcWVnVHd6RnFPOXI5Y0E2KzlieHVnNG9ld3k1RjIwQ3VNekRwYmlYWTJIYzBqOEVLMkRLaUkzODlkZ3JRZXU4TVM4b09KTHdrTFFpQi81endxOVdJN0tLd3lRd3Rrb3VGMUZFUUVheGVmQThORXQxMTRUT21HcXowejA1bzN0TFRuNzh6eFNmUzFIbExTSVhGcEM0L083VkkzNnA0bU9oSmJKTEMyTkx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQXNHbk1DV21YMDluaE0zaFdoYzNOMThXbEJubzVNMWY0T3NTRlZmTEhQdFNoWHJwaUhlcUpLV3hGcEVqUTloVUd2UVI2ZTNRcDJ2TXYvenNQbGJNSktOR0syMUxYZHhSWDBLaDhFdjNKNW1EWnVGaDNHbXlhVjdieURJVE16T3JxOEpuWUpKVVhSMzZWNHZhYjhBQTJUZlFRVC9jNFBKM0FIcmJnNGk5bDBWaVRrK3FGdWQvZVNLc2JXaUdoR045V0NTUzd6bWRLRHpaZ3dhNWFHSDV3cHBSUFpGcUEyQUIwTnFVakIwMUcyZ3E1S2hHMVkrZ0dlSVl2STNzTmduZmZiTnJQcGJDbGhFQ085MWZJMnZnWDNuSnBpaE0yYTY4L1BKWDJuQlpCdVZDeFpteGlRcDZUZ2Z4eGNBQ3pNdG9jNWNk; FedAuth1=VmlJc2ZOMWV4M0FpS1ZCajlwQS80Umkxb3VYa1VpbnBQSkpGSTRFV3Zibzg1YnVQcnFuQVJIazBDM1YvcStRWmo5ZjlKTDgrblIxY1BNb0padjFCcXVQbThxWlgvWFg1TE93Z3R3dG5tcnN0SHNUcERkOVBjcStRSW15V012Uk45Y2kvekZraC9yQVdBbWd4N3RjOGEwbHdNZ1hacWprdHlVeDVtRWF1L0xCT2hSckY4V29FNzRFU21Mc0lZY2Y3ZzA3ZExxaDllRnhLQmNOVDZxbHlPQ1pyeDl6SGJqRUczRnM4Ym1jRUt6Y0pSS0tZT2R0RXNueHFJZ1puYmFwNS9OV2RmRmljYXRkY1ZSNURMOFJHbC9aY3JCNyticXpRVW1Yd3l1M0Y4SDBDMWV3bnNtQStmdTM4WWZUSDRKVUpMVmlqalJUOXc0UThkREdYSHNrdHcvODN4VHcwYzNseHd1WVA3TXhMUUFnQUFEdENZejAwalZMVnpiR0FDaDZjT0ZtRzlhenJ1dU5qWjRQSkR4ay84OGE4SzlVc3ZDTE1JTTcraTJaR3NhdFo3ZDNBVlV1V0ZOOGNRSkZrZDZPVmdGVkpOaURBMzBLVFUwVFZObVMyUVFCd0J0ZTdqQ0xhYVhTaGdGcWxSbXYwVEtxOEZyYkl2WVQ3cTVocmRtNDFSam1LKzFDcHJhdVQ5WnRxd1FuZVoxWjR6R3VkSjZhbTNDVFNWamxsMUx0MHFoc1ozV1pwcnRTMFphUWt2OVhBMzNLU29UcGVBa3ZzTGxJWmJkdW85MmgyWnRtb2FoNkpWUGFNekRhTFhKSDQxS0VlZ09KQlBtSmVLc09hYkN4MTVNcmcyak14Njd1WjJrdHU3THNxbW44bDdMSHB5L01uQlFsUFZzMnI1UXVJZElQZUduaGN6Z0pTV3lwcVdFdnNtR0tiZzU4MVhVMHlQYWp2OHV0ZWRBTWFIL2FYT3ZmV25qRGhOV3E1U2prQ0d1RWFNSDEvVmpqYlVIWFpTRG1kdUZJeFFhbCtCRTVVWGhIakJXUERraXV0MndMOHpSSWxGYkNldXpzYU95cEVBcU5CVWxNMDJQSDY3QXJjMFk4UkdsNGdDa2NnWTEvb1JHb2ZQSEJCZHg2bklwc1NpZEdudEljLzQ4SjNZam5aRFZ1WHFBWjBIMGVDOTdocFFhZmF5WFB4elBLbFJnZUNNWW1BL2EraXdDZGNtaG1UTW4vYTByYXBJeS85RW9TaVN5Y1c3VE5RV2I5c0hsVUtuWkNyRnZFcVZ2cjMwN3NRV2VYeFlQV2hPN0syK09Zd0dBc3B3RWd5TE0zS0krZkJpUlVwNWcwakdMU2hjMy9tSlpQSzFXcUcySi9rMlZXYkRMNzZJR1lzNGViSHNwQ2p3Skg3bEtBSkk0RDltSWozTEZSRm5PWVcwS0h1NGFtREdhYlFsZ1c1Uml0NmJhUDlva2VYNWhxamVpc2piM3ZYQkUrZ3ZPbHZzTFdpTkJYZGxabzlqV1E2cGVrMUtER1g3VkxvMXdybURjYitqL2x3bjRTcEtjN2RmUklaVkxvanEwUnF0ckhYbDdLMW5BNW5paHZvUTZYVUJQZjVrZkRhbm43Z01qVlphRi81dm1aNkR0aitVdGdId1lONzRvV3FsTFRlSllMRE5xcmNkdTJDNVR2VFNFV0tXaTMvOHFpbWZnS2pNakFwU2k5M1dpbmpmQkFWMmsrK1hKWmNCWjVDaEtmbWgvZk1YUXVuNHVEcU48L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==; .BLSIAUTH_711=5CF8263A780DC79AFCE1DE9ED396B521F19E593FA178E45C673502965B372FD69E5B6B87B0B491B6272C16F5467BBD2E73B4963035BA5B938805EDD07249BE4B19802B431DF6E11D292A1FA6FAD2B8B2156A90C8FAFCDAA7C9CAA3B698D8FA304B25CCD606C6FF267DC5A3659673A8B1615DD53AB20CF81149B77714387193DEF9A8A339B73E3EDBA13FA77DE90042CD9301DAE7F8E495C80BBB1D0FC09748B6F95B57D833890BBF39AAA17A011CB9C734E1F5396D00B4F7EC05A1F3814D9EDD26AA52D62B60A7344D6540103130864A0CAB927934F6A3D33CA01152998D4396FC6810FBD470E9E147E8AC2C3FC76113D79927E05F946C665242E40044E207E543414D86B3B76D25C22A4CD504CE25B24876D39514258376810889B04EC3EB92557970A504C2BDB35689DFA225294D3033B05B83526EF798034396F60D71B7DB15D9F731AC9674BD0115A9076A9F160CE8922A0D680CF98414FBE6D1719E415E301CC378; .MIXEDAUTH=1A16D9D18506428703FED7E4BB08161AC69AB1C92FB5DC712A1CF672AF1A1006841849552115B6F898CE48A41CD57269E73CD26D9DE27CF93C0AE6FC70979F3A1D0CBB01AF9965E8334CF06EE8B6E99A31BF15BE424ED88C53E9F1937EE30731A9EF42C349300E677612256ACD2640418017CF0CED08EEB3A9FB11A17D60D3AAABDB8174D9B73F6D534F277175FFBF0304FD2F102FE10EDF2EEFBE86389523E48A8ED99648B728280E7CAB1A7C58FA22ADAFDF9C481E8A1AC5F6E1755DFC9FEEDF205A79938C92235C8D1CBEC5573165E1CA8FF78A18B09BE6EE58BA074E5D26D4697B0E46E9FF0FF26ED0D165A941FAB5F881C355CED3E555EFA5C5451D546865ECC2688EEB5ACD3B826A46707EF14B9FF20422B4B1AC98E310916865AE0CFE70C3ED8F83E88B725822D124A1902070F9749E19AE402BF85E9FBC1547FA419C2680B177',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
    }

    params = {
        'periodId': f'{periodId}',
    }

    response = requests.get(
        f'{base_url}/period/selected-period/edit',
        params=params,
        cookies=cookies,
        headers=headers,
    )
    if response.status_code == 200:
        # print("Request successful. Response headers:")
        # print(response.headers)
        print(response.cookies['.BLSIAUTH_711'])
        # Extract the 'Set-Cookie' header
        set_cookie_header = response.headers.get('Set-Cookie')
        # print(response.headers)

        if set_cookie_header:
            # Split the 'Set-Cookie' header into individual cookies
            cookies = set_cookie_header.split(',')
            # Initialize an empty dictionary to store the cookies
            updated_cookies = {}

            # Parse and update each cookie
            for cookie in cookies:
                key_value_pair = cookie.split(';')[0]
                key, value = key_value_pair.split('=')
                updated_cookies[key.strip()] = value

            # You can now use the 'updated_cookies' dictionary to update your request's cookie as needed
            print(updated_cookies)
            return response.cookies
    # headers = {
    #     'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    #     'Accept-Language': 'en-US,en;q=0.9',
    #     'Connection': 'keep-alive',
    #     # 'Cookie': 'hoursDiffStdTime=-6; BLSIAPPEN=!9z2dsSPLuC7RqTdmiOBa4m4YLrxynPFrJmPHSTjOR4tHooiQwyFft6CJBcSFE/cS9WcB6mKY1ZU50w==; __AntiXsrfToken=bd3cd8d65d354630aa48892a1e2642d7; __RequestVerificationToken=hdtGMEkkEralfwjOpIS3-cqtGrdM_Z6ToKUJiaxICKAr1nyf7yvYHkG8FpBj9oFcd7CMJ75BKxwaF6kZM1dAgFPV_3c1; ASP.NET_SessionId=bcirl5vvb5nwxgmooumnm0c4; FedAuth=77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il83ZWQwODNjOC02MWMyLTRlYzYtYjFjNC1iMmNhZTE1ZjY1MDAtMkU4Mzc2NjhBNTNCMTQxOTg2MDRFMTgxRTgyQTE3NzkiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6MTUxZWRlNTUtYTE4NS00NjEyLTgyODItZGJkZDFlMzAyZDgxPC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFHWWFrOG54b2tVVHo5Ukhza3ZTalo3bEJJNzhvQ01wVVVwRUFaaitUWUl1YWRYbU9ZRHlkUWJkNGwrME5BUDIvdGdXcUFzT1Z4YkFVR0M5bVBrNG93RmcyTDMra1ZHbm9Gd3VyQmdzNWNzR1N6alFiRHdCeEtyOWR1Uzk0NGtRRWhneFZDQ3NYUVlvclU3dGl3aDFaeUZaQ2ZYOGIxV3IzTjBOV1NkUzhBZXBiS2d0VUl4NUcrQzhzZDFLQ3JFUDRLdUtUcFdNZUZyV0I5alFXdkRKS1pSYkRGT1pCb0lEcVVXSVpFam5jaDF0VkNtUUpadnZZTU1PZm5hbXVaSjNWWHZPdnZ0WENtNE5GVEUxWUVkSDVTRUc5N0lPV01tMVI5bkhMbTg0ZkJNSVcxZGxGREp2MkFXRkw4YWR1QnkyK3NsNWl2MEhVeGcwbUlkVzZwRC9wV05tTHRqM3NFUDFjU3dYS2I1NU1TclB0TGpjekFoZHloU3V4ZWNEY2ppdC9nS2dhM2lPL3UwWm9qbjNCT3pLd2F5cmFrZVU1U1pWRndaSFZoNEhDdlVJWUNjVm1NYTJyQVNvNXpLMmc4cGM0eWRNaFN4Qnh6S2M4KzN1Zm9SeWx3MHhxTUVEVFc3Y2g3Z1VYbFZWVUlpV3pSWnNKSWFtOGFxRTd1YkRkRFFQanJYcE1oNDlkd3cveVRLa0VTeVIwYTBERWFXclVsSHI2bnJaZEpSKzdEYnZsRnNMdTViRXFLdkNySFExL2F6QjcwcDhCSlZFYTh2Nms0dG95NndxYm4vOUZTem1kZ3A0NXVXem5lV0c5V2ZSa2gwOUlVc2NDK2NHbXUyc21lODlQYitabmNDdXBFN0tOSW8yaXd6bEJ3dFJmM1hVd0dqRWZUMUl0MWdwNGtpREx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQWxVVVlzSS9TY0htdkx3cG9zMEVMa0g3YnoySnJ1U1ptaVA1UzQ1dXhobmpCYktWWWU5WFd5N0pvbFYzVm5BNkFWWXcrZ2xhOE00UkQyTmNOcW8xNnA4RWZBZ2o3OTVvOHBFc2xmTmhadWxob0JlSm1PTGV4a3lKOFNqN2J3LzQ5MkpGa3l1MEhqYlR3dmMrUXdkUzJZejZVaHZxekZ1eXlDalNsMkIyRXZRQTFFQVhhRGFNN2N1Mmt6VkRLTlcrK2Eyb2YzRlZWT0cySGIxcVd3MW1ndGQvTytDT2R3M3Y3cDdPUEMrSW5EUFBIWG1TZTk1ZVg3d0Q2SDJicXNPVW9tUEozOFpVY2kyNG9XSUtUcW1TTVNMdXd6NFB2dTNSbHpMRmdJeUFDT0JrRU1XVXlyeHNLbFI0TktxbVZTdEpQRU1T; FedAuth1=VGV5NURKSFpjNUxndjBPWGdlU3dKQkhRQWorSDA3aXdzM2FZMjZRUklPNWFoZ2Zlek14VEFGZGowY1kxOUtrd3BsMXBRaVZBdWNqVFpEZUtUUTR0eE9GYWY3WjVVRFY2N2JuOVA3VXU3Umt4cDg1cTkrdjdUTjNYbHZtQ2xyYlhiK0FNSnd0WUdSOGpvWEw3N0h6aEFac0htQjMvQ08wRTZ6OXFvT1NBSTdTaGNSL0hGZGQ5ODZTbjF6OS9Xb0x0QVUvWGdhZGpXYjFpSmlZckdBSFArMDRSZmRmekhuMFhHTFJjOFM0Zkx3N0JwODNXd3RML01EYmlqWHNwTVBMSGFtWlQzby91c24vTkVjMFY0R1JXa0l1SldIQ1V5b0RiT05jQlhrTzVuK0NOUGtnK2tBUHJmYVVjems0L3h2V0tWcGJTTmdXWWJXTHB4V04yUi9hdXFBTkFTUFNvcklOb3B1VzI4TDVUQUFnQUFFVmpqbDNaKzhDZmozVjVGeUE2SG8waVd0Y0NKTlhXV0g2c0xZWHgrYjVjSFpVTlMzN2d6TXJXMW1nZmhYa2VGakdkY2p3SXdESEVNTlNuMlFXY3phQnlMeWhib0o1VmRqM0hyc0I5TGV2SmlXOFlLRC9lSk96NnRxQ2w4M1RmQXRVM2Z1WXdRUWxxYkxlV1Z1K1FVSG1TVytqQVY2eEJmWmMzb2Vidm5QWWdMSHc1Q2xHMDd0WVNpY0M3endLSURleEpVYk5QL0U5SHJkNUdvUWE3OUFOMTFmNzMxSEpINFJiNlJjS0VSUlNQN3RxQ3h3Sy84M3d4OWxoWmtmUVdzTUFsVklBUDhKRkxycFRrcWJSWlh1Rk1xeUxSbytib0p6VEMvVWtaYlBuM0dFM2I4elozajBiSzVwOFRSMlBqWk9hTHQ4czdaU1h3ZHNURTRMVlRKRWhENWl6S2RuR0h2M0JqUGw5SmZpMWhmMEtic2VnZU9oYWo4TUxSTjZQaTVaTVptTjRpRVQ1VHNYQnM5blRhbTZiRzJGYUs5b0NtcEFFTnNTRVlON1NkUHkzaWtaaStDMXBaTzNRS2FGY0RzSi9MWCs3dmVRSklnS2xTRjlnVGJ6cnBURGxCaUx6SFJxeXNta1JmbmRmTzVtVnNabGNNOHlhZVV0RFc4RWNCSUFKT1ZpK0VhT0pqVW1YdjlYU3VUMG50cmV5ejJ0a3lPdUhseW82K1U1T2tadFcwR0JBb2ZKZ2pORGg4UDM3VjRGSEIzcmY2TjNpUmpqRm55SnJpdUVPWE8xZEFBeURraHM0dmVtT1Zva1JjbGU5VUViY1pyWmVKdTdNTzdaWGZVeXh3UnVSdkl4RnNQZkJJdmpjeXdzY0ZFbVhGWXJHMnBqNVQzT3JwOGF2SFJJMXpGalNFeXU1Y2JKWEZWd0hHVWJJY1ErU0VLZmgvbit2NXd4eXB1dmxJcFp5Q3JQNERUenBOQ1QreFlTZWdkZkhGOVJ4RGQxQW5YMVBSUmRWTTdmQ3F6R2Y3ZG1BUmFDM2RZOEtpM3VCVlYycTMzUExxK3hMYlNEWHVaSUhrUzNiR1J5T21xZVBGaTh2bjlsSXZTc0FqSCt2UlhLTVZuN0swVEdVSVVsTDF5TEVrUkJ1aDJMckgxaTU0dWIrVlNUYkZKN3RBeEEyWkFjb005MGszMzJNNm1JYm8yMWlXM1JrMDR1cW91V2FXSE90T0dmUldxS3JnTWszVTRHMW89PC9Db29raWU+PC9TZWN1cml0eUNvbnRleHRUb2tlbj4=; .BLSIAUTH_711=2C2D1DB3E378698AA43C6A9639380A3BBFD0D8914D198BA7AED2CD6ABE3BFFC966E738541E0EBB7B2CF95E9F23E6AEC5B1DE823E0CA202E2D6D13EF7A1FF3C517379D4B1740E830E54211EB8174CD7B1455080ED7F4CB0A0640F8C7A949EFAAA052FD740AF609296A2F8C4C0A3259576D11939780E3E74D9E869E964EB68A779D5BB8AA8051871541FF0F089E26E20720D8F271794096953650520BA3947B64B85CF4E257292A5ABAC868CFEE2B93A1C7BB0EC6FC36450B0ED5AEDFAB27C2849937E9C94F903D308A76DAF5549C63CC865345D9E2BF9D7592724FBA8EEA4277F2B14900D6B54D58368A549C88AD15C3438B46DA5005C4FCF90B0ABC66DBC8631E61642B0B60859B12314BB6855264AA7C3C69B00AB21107A30639C7DDE97F48013CBCFB665DA83E09DBA45CC4C2F06EC7CF5CD3609BC68EE2A71BD2368D486FD62FD150C016BB131E229104AA5B03CD18161DC0F702EC3AC2378472A8C35A5B86AABFF05; .MIXEDAUTH=CD90163A877C32B9A2AC6B9565AC0EC97A9EA2469E169D4AD502A3C140DC0ADA8DA656B9925EB5C9954C56E091281F7EE65971D5E530239F3DF331936ED97DA6D6FB5E541F5F9338D6CD779A20D70305D6C2FC941182DCD2594450567744A803CF8A4A983726C39B94815D69BA9E5EC480E99A520E455FC7B9A655025CB7F2CF263EF85A5EBDF96CD9A1C7FC642004494FB0369C3949CF4B4E4C7CC19FE28970161CC53ADD6BE9D598930E20F8F713D91B3FE06C890A30F4ED1A74FD8F48D526E08D13BB265B498F658B3CD14C9D13D2D9A104857F6694D42DC63D12CD3984C5BE062D03B6FA66173850A8388BB96588003FF8C88FBD5D73AB1500E1F842F955ABED7CC35E29DD1915C4A673076D03A124A1CCE71EA48D29241C5924D5ACE211A0964EBEC2FCCE1CA95DBF663FD8FA00618B23335F6F721B494C11877D30AFFB319FA295',
    #     'Referer': f'{base_url}/Modules/Reconciliations/ExecGrid.aspx',
    #     'Sec-Fetch-Dest': 'document',
    #     'Sec-Fetch-Mode': 'navigate',
    #     'Sec-Fetch-Site': 'same-origin',
    #     'Sec-Fetch-User': '?1',
    #     'Upgrade-Insecure-Requests': '1',
    #     'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
    #     'sec-ch-ua': '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
    #     'sec-ch-ua-mobile': '?0',
    #     'sec-ch-ua-platform': '"Linux"',
    # }
    # params = {
    # 'periodId': 3 ,
    # }
    # url= ff'{base_url}/period/selected-period/edit'
    # print(url)
    # response = session.post(
    #     url,
    #     params=params,
    #     headers=headers,
    #     allow_redirects=False,

    # )
    print(response.headers)

    if response.status_code == 200:
        print(response.cookies)
        return(response.cookies)
    else:
        print(f"Request failed with status code: {response.status_code}")

def getPeriodList(session):
    cookies = {
        'BLSIAPPEN': '!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==',
        '__AntiXsrfToken': '9f1ed8ac955d48c287beb6e63c79adbf',
        '__RequestVerificationToken': '7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81',
        'ASP.NET_SessionId': 'u23dayhekpus035ygqvkzi5d',
        'FedAuth': '77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctNjU5MDFCOTJEOUREODEzRUJGMEExRThBMkI3MDRGRTYiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6NDg0Y2Y4OGEtODA2Zi00NjAyLWJhMmUtMzgxODdjMzJmNWE2PC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFFS3JQZDZ4bVN5NFhKWGJoUkh5c2hSNDlEdmJLVnBSM3M1aHpKZVlCaGJKRVo1RzhudHg4K3Zmc1lLNlUyaXBhdFVZZXRJZi9TZmN0WlBjWFRMdmEvT1pGSEV6cHpyZVhMR0taS1JmMFFodzVaSXA1WHRjVUM0T0d1SzJqOUUwZnpZWE9lUVhKaUg2NHVuWVBkYS9HczJOellTN1ZDaWJxaU1teTFrNU8xUzRWMFFIcDF3S2d2L2JJWVBmbnJpSjhQc1BNeVpwWVpOM1lIb2ZlWnJKQnVqQ1I5dzRHRks5eUJPeDh4dFhDZTNXclVoZ1FFWm5xK0t3aW5rQ21vRTFnc1RsSGFCYWUyQ3dkd200dzVUbi8vR1NhSzVGWmg1VGF3VytMc3Z5N25MdmJxUWZSdGlmaDFnYXBBOTlwTGs0YTBHMU82WVljeVAzbmkvZDhQL0hXZzI1QXpnanZka0Q4WWRoUVZjNGFVNTlCcTNNYXVBc1FZMStRWDFubmo1ZVVxa3dHNEJqMGN2cFdpNjB0NzJsM0J0MThybDZRdXQ4YmhFeUVhejI0VnV4UVB3T2JLOWM0YVVoMzZueW1pWm1OYTkwVVhzNzF0RmZFeW1TWG5SQ3JTUUN4aUtxWkZFZVVUb1VmN2E5UU9qTWtTeDZ5QithVWRwcUYwUXhJbDFWMGtwR2JjcWVnVHd6RnFPOXI5Y0E2KzlieHVnNG9ld3k1RjIwQ3VNekRwYmlYWTJIYzBqOEVLMkRLaUkzODlkZ3JRZXU4TVM4b09KTHdrTFFpQi81endxOVdJN0tLd3lRd3Rrb3VGMUZFUUVheGVmQThORXQxMTRUT21HcXowejA1bzN0TFRuNzh6eFNmUzFIbExTSVhGcEM0L083VkkzNnA0bU9oSmJKTEMyTkx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQXNHbk1DV21YMDluaE0zaFdoYzNOMThXbEJubzVNMWY0T3NTRlZmTEhQdFNoWHJwaUhlcUpLV3hGcEVqUTloVUd2UVI2ZTNRcDJ2TXYvenNQbGJNSktOR0syMUxYZHhSWDBLaDhFdjNKNW1EWnVGaDNHbXlhVjdieURJVE16T3JxOEpuWUpKVVhSMzZWNHZhYjhBQTJUZlFRVC9jNFBKM0FIcmJnNGk5bDBWaVRrK3FGdWQvZVNLc2JXaUdoR045V0NTUzd6bWRLRHpaZ3dhNWFHSDV3cHBSUFpGcUEyQUIwTnFVakIwMUcyZ3E1S2hHMVkrZ0dlSVl2STNzTmduZmZiTnJQcGJDbGhFQ085MWZJMnZnWDNuSnBpaE0yYTY4L1BKWDJuQlpCdVZDeFpteGlRcDZUZ2Z4eGNBQ3pNdG9jNWNk',
        'FedAuth1': 'VmlJc2ZOMWV4M0FpS1ZCajlwQS80Umkxb3VYa1VpbnBQSkpGSTRFV3Zibzg1YnVQcnFuQVJIazBDM1YvcStRWmo5ZjlKTDgrblIxY1BNb0padjFCcXVQbThxWlgvWFg1TE93Z3R3dG5tcnN0SHNUcERkOVBjcStRSW15V012Uk45Y2kvekZraC9yQVdBbWd4N3RjOGEwbHdNZ1hacWprdHlVeDVtRWF1L0xCT2hSckY4V29FNzRFU21Mc0lZY2Y3ZzA3ZExxaDllRnhLQmNOVDZxbHlPQ1pyeDl6SGJqRUczRnM4Ym1jRUt6Y0pSS0tZT2R0RXNueHFJZ1puYmFwNS9OV2RmRmljYXRkY1ZSNURMOFJHbC9aY3JCNyticXpRVW1Yd3l1M0Y4SDBDMWV3bnNtQStmdTM4WWZUSDRKVUpMVmlqalJUOXc0UThkREdYSHNrdHcvODN4VHcwYzNseHd1WVA3TXhMUUFnQUFEdENZejAwalZMVnpiR0FDaDZjT0ZtRzlhenJ1dU5qWjRQSkR4ay84OGE4SzlVc3ZDTE1JTTcraTJaR3NhdFo3ZDNBVlV1V0ZOOGNRSkZrZDZPVmdGVkpOaURBMzBLVFUwVFZObVMyUVFCd0J0ZTdqQ0xhYVhTaGdGcWxSbXYwVEtxOEZyYkl2WVQ3cTVocmRtNDFSam1LKzFDcHJhdVQ5WnRxd1FuZVoxWjR6R3VkSjZhbTNDVFNWamxsMUx0MHFoc1ozV1pwcnRTMFphUWt2OVhBMzNLU29UcGVBa3ZzTGxJWmJkdW85MmgyWnRtb2FoNkpWUGFNekRhTFhKSDQxS0VlZ09KQlBtSmVLc09hYkN4MTVNcmcyak14Njd1WjJrdHU3THNxbW44bDdMSHB5L01uQlFsUFZzMnI1UXVJZElQZUduaGN6Z0pTV3lwcVdFdnNtR0tiZzU4MVhVMHlQYWp2OHV0ZWRBTWFIL2FYT3ZmV25qRGhOV3E1U2prQ0d1RWFNSDEvVmpqYlVIWFpTRG1kdUZJeFFhbCtCRTVVWGhIakJXUERraXV0MndMOHpSSWxGYkNldXpzYU95cEVBcU5CVWxNMDJQSDY3QXJjMFk4UkdsNGdDa2NnWTEvb1JHb2ZQSEJCZHg2bklwc1NpZEdudEljLzQ4SjNZam5aRFZ1WHFBWjBIMGVDOTdocFFhZmF5WFB4elBLbFJnZUNNWW1BL2EraXdDZGNtaG1UTW4vYTByYXBJeS85RW9TaVN5Y1c3VE5RV2I5c0hsVUtuWkNyRnZFcVZ2cjMwN3NRV2VYeFlQV2hPN0syK09Zd0dBc3B3RWd5TE0zS0krZkJpUlVwNWcwakdMU2hjMy9tSlpQSzFXcUcySi9rMlZXYkRMNzZJR1lzNGViSHNwQ2p3Skg3bEtBSkk0RDltSWozTEZSRm5PWVcwS0h1NGFtREdhYlFsZ1c1Uml0NmJhUDlva2VYNWhxamVpc2piM3ZYQkUrZ3ZPbHZzTFdpTkJYZGxabzlqV1E2cGVrMUtER1g3VkxvMXdybURjYitqL2x3bjRTcEtjN2RmUklaVkxvanEwUnF0ckhYbDdLMW5BNW5paHZvUTZYVUJQZjVrZkRhbm43Z01qVlphRi81dm1aNkR0aitVdGdId1lONzRvV3FsTFRlSllMRE5xcmNkdTJDNVR2VFNFV0tXaTMvOHFpbWZnS2pNakFwU2k5M1dpbmpmQkFWMmsrK1hKWmNCWjVDaEtmbWgvZk1YUXVuNHVEcU48L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==',
        '.BLSIAUTH_711': '597C082F7E6DDCCC946BDA29C8ECAF41C0C47113892C7BAFD5E51FB2FC43087293E3603B0441CE604F17FFF85C57CAEE4DFB5A5C46C042F193C27F1E610B5575C71E9B1FED28A84C436686A88C5D7628AE606D322353ECC839730127E8A1148F1755B5F09828FC7CE5E36373DBBAE8E8B32EFD5F45CF8DF068BA51729E74B263164FD16B69E32E58F863BA39F624E95DDEAE38BC5FA394124CDE001E3D577466D037E19E53CC17DE18B1A9E68A78808A436AA5DA57219C21A47E83A8FAAB12B73AD86BEE16D6C42D0EE89FB614B225C7457AD4015210C120C75D7169F740ECC144EA359BCC803ADC6DB817EBA1C39E07F0765340790875C465EE9EEF08A8FF1470A708ED3D06BFBCD8236D7699A256E9422AE4D66C965960F9A94CE0AF9336DB29FC410CD526505B159BDE771E4B5C4C70376F26E258746225A26EC4EAC832E31ADB1E5134B53E98981DADEA00C457368F10A58FF9F7426874EB52D6C867FA365439189F',
        '.MIXEDAUTH': 'E2607736EC48D9E1CF0A56ACC718A0014EF494D98EB5167CB1CFF2271514ED25DDB839B57AE71A8029ABCD5D5F7E3AB56E27B2ED9C73BD31F5BCA3CC80C9055F90E9133A6874A614784623CDC9ECE262708F6DD500579D1A8E1D95AA0162C10A47C1986E8632D0A1743F6F5C6B40A6B78C0F810131CA8BD8E0F9BE434F74B10A2527D75586D6365A09EE237B5A6DD1759F2C88B6C3431600F0718B5EDD5DBAF0A5EA67F7167189C94717B09A2C7325BA037050224B8A9145D2EE806A76015EFC1F9C4F55394C6816E3AD6DD9C0ED47F239834BACD78567D4CCA31167FC56E05861DF3B0322651095852EE8911F8D3661E02A656C00974C74EBC145485916F00CD5920AC6E93AEC46FCC6915BDB0A90EEF0775661C59645B97C7885104EEA0B52EE4963B7F192C785F6AFC025E848F01DBDC906020381C7BB0366F897982D927698E9A602',
    }

    headers = {
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        # 'Cookie': 'BLSIAPPEN=!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==; __AntiXsrfToken=9f1ed8ac955d48c287beb6e63c79adbf; __RequestVerificationToken=7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81; ASP.NET_SessionId=u23dayhekpus035ygqvkzi5d; FedAuth=77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctNjU5MDFCOTJEOUREODEzRUJGMEExRThBMkI3MDRGRTYiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6NDg0Y2Y4OGEtODA2Zi00NjAyLWJhMmUtMzgxODdjMzJmNWE2PC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFFS3JQZDZ4bVN5NFhKWGJoUkh5c2hSNDlEdmJLVnBSM3M1aHpKZVlCaGJKRVo1RzhudHg4K3Zmc1lLNlUyaXBhdFVZZXRJZi9TZmN0WlBjWFRMdmEvT1pGSEV6cHpyZVhMR0taS1JmMFFodzVaSXA1WHRjVUM0T0d1SzJqOUUwZnpZWE9lUVhKaUg2NHVuWVBkYS9HczJOellTN1ZDaWJxaU1teTFrNU8xUzRWMFFIcDF3S2d2L2JJWVBmbnJpSjhQc1BNeVpwWVpOM1lIb2ZlWnJKQnVqQ1I5dzRHRks5eUJPeDh4dFhDZTNXclVoZ1FFWm5xK0t3aW5rQ21vRTFnc1RsSGFCYWUyQ3dkd200dzVUbi8vR1NhSzVGWmg1VGF3VytMc3Z5N25MdmJxUWZSdGlmaDFnYXBBOTlwTGs0YTBHMU82WVljeVAzbmkvZDhQL0hXZzI1QXpnanZka0Q4WWRoUVZjNGFVNTlCcTNNYXVBc1FZMStRWDFubmo1ZVVxa3dHNEJqMGN2cFdpNjB0NzJsM0J0MThybDZRdXQ4YmhFeUVhejI0VnV4UVB3T2JLOWM0YVVoMzZueW1pWm1OYTkwVVhzNzF0RmZFeW1TWG5SQ3JTUUN4aUtxWkZFZVVUb1VmN2E5UU9qTWtTeDZ5QithVWRwcUYwUXhJbDFWMGtwR2JjcWVnVHd6RnFPOXI5Y0E2KzlieHVnNG9ld3k1RjIwQ3VNekRwYmlYWTJIYzBqOEVLMkRLaUkzODlkZ3JRZXU4TVM4b09KTHdrTFFpQi81endxOVdJN0tLd3lRd3Rrb3VGMUZFUUVheGVmQThORXQxMTRUT21HcXowejA1bzN0TFRuNzh6eFNmUzFIbExTSVhGcEM0L083VkkzNnA0bU9oSmJKTEMyTkx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQXNHbk1DV21YMDluaE0zaFdoYzNOMThXbEJubzVNMWY0T3NTRlZmTEhQdFNoWHJwaUhlcUpLV3hGcEVqUTloVUd2UVI2ZTNRcDJ2TXYvenNQbGJNSktOR0syMUxYZHhSWDBLaDhFdjNKNW1EWnVGaDNHbXlhVjdieURJVE16T3JxOEpuWUpKVVhSMzZWNHZhYjhBQTJUZlFRVC9jNFBKM0FIcmJnNGk5bDBWaVRrK3FGdWQvZVNLc2JXaUdoR045V0NTUzd6bWRLRHpaZ3dhNWFHSDV3cHBSUFpGcUEyQUIwTnFVakIwMUcyZ3E1S2hHMVkrZ0dlSVl2STNzTmduZmZiTnJQcGJDbGhFQ085MWZJMnZnWDNuSnBpaE0yYTY4L1BKWDJuQlpCdVZDeFpteGlRcDZUZ2Z4eGNBQ3pNdG9jNWNk; FedAuth1=VmlJc2ZOMWV4M0FpS1ZCajlwQS80Umkxb3VYa1VpbnBQSkpGSTRFV3Zibzg1YnVQcnFuQVJIazBDM1YvcStRWmo5ZjlKTDgrblIxY1BNb0padjFCcXVQbThxWlgvWFg1TE93Z3R3dG5tcnN0SHNUcERkOVBjcStRSW15V012Uk45Y2kvekZraC9yQVdBbWd4N3RjOGEwbHdNZ1hacWprdHlVeDVtRWF1L0xCT2hSckY4V29FNzRFU21Mc0lZY2Y3ZzA3ZExxaDllRnhLQmNOVDZxbHlPQ1pyeDl6SGJqRUczRnM4Ym1jRUt6Y0pSS0tZT2R0RXNueHFJZ1puYmFwNS9OV2RmRmljYXRkY1ZSNURMOFJHbC9aY3JCNyticXpRVW1Yd3l1M0Y4SDBDMWV3bnNtQStmdTM4WWZUSDRKVUpMVmlqalJUOXc0UThkREdYSHNrdHcvODN4VHcwYzNseHd1WVA3TXhMUUFnQUFEdENZejAwalZMVnpiR0FDaDZjT0ZtRzlhenJ1dU5qWjRQSkR4ay84OGE4SzlVc3ZDTE1JTTcraTJaR3NhdFo3ZDNBVlV1V0ZOOGNRSkZrZDZPVmdGVkpOaURBMzBLVFUwVFZObVMyUVFCd0J0ZTdqQ0xhYVhTaGdGcWxSbXYwVEtxOEZyYkl2WVQ3cTVocmRtNDFSam1LKzFDcHJhdVQ5WnRxd1FuZVoxWjR6R3VkSjZhbTNDVFNWamxsMUx0MHFoc1ozV1pwcnRTMFphUWt2OVhBMzNLU29UcGVBa3ZzTGxJWmJkdW85MmgyWnRtb2FoNkpWUGFNekRhTFhKSDQxS0VlZ09KQlBtSmVLc09hYkN4MTVNcmcyak14Njd1WjJrdHU3THNxbW44bDdMSHB5L01uQlFsUFZzMnI1UXVJZElQZUduaGN6Z0pTV3lwcVdFdnNtR0tiZzU4MVhVMHlQYWp2OHV0ZWRBTWFIL2FYT3ZmV25qRGhOV3E1U2prQ0d1RWFNSDEvVmpqYlVIWFpTRG1kdUZJeFFhbCtCRTVVWGhIakJXUERraXV0MndMOHpSSWxGYkNldXpzYU95cEVBcU5CVWxNMDJQSDY3QXJjMFk4UkdsNGdDa2NnWTEvb1JHb2ZQSEJCZHg2bklwc1NpZEdudEljLzQ4SjNZam5aRFZ1WHFBWjBIMGVDOTdocFFhZmF5WFB4elBLbFJnZUNNWW1BL2EraXdDZGNtaG1UTW4vYTByYXBJeS85RW9TaVN5Y1c3VE5RV2I5c0hsVUtuWkNyRnZFcVZ2cjMwN3NRV2VYeFlQV2hPN0syK09Zd0dBc3B3RWd5TE0zS0krZkJpUlVwNWcwakdMU2hjMy9tSlpQSzFXcUcySi9rMlZXYkRMNzZJR1lzNGViSHNwQ2p3Skg3bEtBSkk0RDltSWozTEZSRm5PWVcwS0h1NGFtREdhYlFsZ1c1Uml0NmJhUDlva2VYNWhxamVpc2piM3ZYQkUrZ3ZPbHZzTFdpTkJYZGxabzlqV1E2cGVrMUtER1g3VkxvMXdybURjYitqL2x3bjRTcEtjN2RmUklaVkxvanEwUnF0ckhYbDdLMW5BNW5paHZvUTZYVUJQZjVrZkRhbm43Z01qVlphRi81dm1aNkR0aitVdGdId1lONzRvV3FsTFRlSllMRE5xcmNkdTJDNVR2VFNFV0tXaTMvOHFpbWZnS2pNakFwU2k5M1dpbmpmQkFWMmsrK1hKWmNCWjVDaEtmbWgvZk1YUXVuNHVEcU48L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==; .BLSIAUTH_711=597C082F7E6DDCCC946BDA29C8ECAF41C0C47113892C7BAFD5E51FB2FC43087293E3603B0441CE604F17FFF85C57CAEE4DFB5A5C46C042F193C27F1E610B5575C71E9B1FED28A84C436686A88C5D7628AE606D322353ECC839730127E8A1148F1755B5F09828FC7CE5E36373DBBAE8E8B32EFD5F45CF8DF068BA51729E74B263164FD16B69E32E58F863BA39F624E95DDEAE38BC5FA394124CDE001E3D577466D037E19E53CC17DE18B1A9E68A78808A436AA5DA57219C21A47E83A8FAAB12B73AD86BEE16D6C42D0EE89FB614B225C7457AD4015210C120C75D7169F740ECC144EA359BCC803ADC6DB817EBA1C39E07F0765340790875C465EE9EEF08A8FF1470A708ED3D06BFBCD8236D7699A256E9422AE4D66C965960F9A94CE0AF9336DB29FC410CD526505B159BDE771E4B5C4C70376F26E258746225A26EC4EAC832E31ADB1E5134B53E98981DADEA00C457368F10A58FF9F7426874EB52D6C867FA365439189F; .MIXEDAUTH=E2607736EC48D9E1CF0A56ACC718A0014EF494D98EB5167CB1CFF2271514ED25DDB839B57AE71A8029ABCD5D5F7E3AB56E27B2ED9C73BD31F5BCA3CC80C9055F90E9133A6874A614784623CDC9ECE262708F6DD500579D1A8E1D95AA0162C10A47C1986E8632D0A1743F6F5C6B40A6B78C0F810131CA8BD8E0F9BE434F74B10A2527D75586D6365A09EE237B5A6DD1759F2C88B6C3431600F0718B5EDD5DBAF0A5EA67F7167189C94717B09A2C7325BA037050224B8A9145D2EE806A76015EFC1F9C4F55394C6816E3AD6DD9C0ED47F239834BACD78567D4CCA31167FC56E05861DF3B0322651095852EE8911F8D3661E02A656C00974C74EBC145485916F00CD5920AC6E93AEC46FCC6915BDB0A90EEF0775661C59645B97C7885104EEA0B52EE4963B7F192C785F6AFC025E848F01DBDC906020381C7BB0366F897982D927698E9A602',
        'Referer': 'https://hyatthotels.us2.blackline.com/home',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'bl-correlationid': 'ebafade81706722878678',
        'newrelic': 'eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjM2NzIzMDAiLCJhcCI6IjYwMTQzMzY1OSIsImlkIjoiMGIyODQzMzBhNWEyMzNhMiIsInRyIjoiNTM2OGI0YWIwZTgzY2Y2Y2E1ZWQ5MmZjMjgzNWMwZGYiLCJ0aSI6MTcwNjcyMzA1OTk2MiwidGsiOiIzODkzNzkzIn19',
        'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
        'traceparent': '00-5368b4ab0e83cf6ca5ed92fc2835c0df-0b284330a5a233a2-01',
        'tracestate': '3893793@nr=0-1-3672300-601433659-0b284330a5a233a2----1706723059962',
    }

    response = requests.get('https://hyatthotels.us2.blackline.com/api/period/list', cookies=cookies, headers=headers)

    if response.status_code == 200:
        # Convert the response content to a JSON object
        # print(response.json())
        data = response.json()
        
       # Save the JSON object to a file (e.g., response.json)
        with open('config/barnes.period.json', 'w', encoding='utf-8') as json_file:
            json.dump(data, json_file, ensure_ascii=False, indent=4)
    else:
        print(f"Failed to retrieve data. Status code: {response.status_code}")
        print(response.text)

def extract_data_to_dataframe(json_data):
    extracted_data = []
    if 'periods' in json_data:
        for period in json_data['periods']:
            if 'months' in period:
                for month in period['months']:
                    period_end_date = datetime.strptime(month['periodEndDate'], '%Y-%m-%dT%H:%M:%SZ')
                    year = period_end_date.year
                    month_number = period_end_date.month
                    period=month['id']
                    extracted_data.append({'id':period,'Year': year, 'MonthNumber': month_number,'url':month['url']})
    df=pd.DataFrame(extracted_data)
    # df.set_index('id', inplace=True)
                
    return df

def writeProgress(progress,error,periodId):
    if error:
        reportName=f"{base_path}/{config_data['source']['instance']}/tracking/{periodId}-errors.csv"
    else:
        reportName=f"{base_path}/{config_data['source']['instance']}/tracking/{periodId}.csv"
    field_names = ['reconciliationId','support_files','date_downloaded']
    # print(progress)
    # Open CSV file in append mode
    # Create a file object for this file
    with open(reportName, 'a') as f_object:
    
        # Pass the file object and a list
        # of column names to DictWriter()
        # You will get a object of DictWriter
        dictwriter_object = DictWriter(f_object, fieldnames=field_names)
    
        # Pass the dictionary as an argument to the Writerow()
        dictwriter_object.writerow(progress)
    
        # Close the file object
        f_object.close()
    logging.info(progress)

def getdirectory(row,periodId):
    path=""
    filename=""
    with open('config/barnes.period.json', 'r') as file:
        data = json.load(file)
        df = extract_data_to_dataframe(data)
        row2 = df[df['id'] == periodId]
        year = row2.iloc[0]['Year']
        month_number = row2.iloc[0]['MonthNumber']
    match config_data['source']['instance']:
        case "HYATT"  : 
            # Corporate / Hotel (Defined by key6) [510 or Blank = Hotel] [!510 or !Blank = Corporate]
            
            #   Spirit Code (Defined by accountNumber)
            #       Year
            #           Month
            #               EntityCode (Defined by EntityCode – 5 digit code parsed)
            #                   Account (Defined by EntityCode - 5 digit code parsed) – key3 – key4 – key5
            #                       Filename: YYYYMM_[Account String].html
            #                       Direct filename from blackline export
            typex=""
            if row['key6'] == '510' or row['key6'] == '' or pd.isna(row['key6']):
                typex = "Hotel"
            else:
                typex = "Corporate"
            entiycode=row['entityCode'][:5].strip()
            spiritCode=row['accountNumber']
            account=""
            
            if typex=='Hotel':
                account=f"{entiycode}-{row['key3']}-{row['key4']}-{row['key5']}"
                path=f"{base_path}/HYATT/{typex}/{spiritCode}/{year}/{ month_to_text(int(month_number))}/{account.replace(' ', '_').replace('/', '-')}"
            else: 
                account=f"{entiycode}-{spiritCode}-{row['key3']}-{row['key4']}-{row['key5']}-{row['key6']}"
                path=f"{base_path}/HYATT/{typex}/{year}/{ month_to_text(int(month_number))}/{account.replace(' ', '_').replace('/', '-')}"
            filename=f"{year}{month_number}_{account.replace(' ', '_').replace('/', '-')}.html"


        case "ALG" : 
            # ALG
            #   Year
            #       Month
            #           EntityCode (Org Unit ID-EntityCode) (required lookup on ALG_OrgStructure table)
            #               Account (Org Unit ID-EntityCode-AccountNumber-AccountName
            #                   Filename: YYYYMM_[Account String].html
            #                   Direct filename from blackline export
            df = pd.read_csv ('org.csv')
            entiycode=f"{df.loc[df['Organizational Unit'] == row['entityCode']].iloc[0]['Org Unit ID']}-{row['entityCode']}"
            account=f"{entiycode[:4].strip()}-{row['accountNumber']}-{row['accountName'].replace(' ', '_').replace('/', '-')}"
            
            filename=f"{year}{month_number}_{account.replace(' ', '_').replace('/', '-')}.html"
            path=f"{base_path}/ALG/{year}/{month_to_text(int(month_number))}/{entiycode.replace(' ', '_').replace('/', '-')}/{account.replace(' ', '_').replace('/', '-')}"
        case _  : 
            print("instance not supported. current support is for HYATT, ALG if tyring to do one of the supported then verify you have proper spelling and case")
    return path,filename

def keepAlive(session):
    cookies = {
    'BLSIAPPEN': '!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==',
    '__AntiXsrfToken': '9f1ed8ac955d48c287beb6e63c79adbf',
    '__RequestVerificationToken': '7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81',
    'ASP.NET_SessionId': 'pbd2ucyk4cx0lmit31faqwi2',
    'FedAuth': '77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctNUFFMjU0Njc4MjM5N0M1MzZGNUE3MDI2MTIwQTkxODAiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6MjgzNjNhMDMtNjQ5YS00NjNkLTg4NGMtNDc5MTQ4MDY1NDUxPC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFMWUJxR3NzdDM3ODNsbnQ0d0ZCMkhsanIraUc3WkUrd1I5KzZ3cVZpSGxnUjZtQXR3QWRielhseXorVnJld1YrOUlieEgycW02eFoxbTZ4Rklac2dHN3IwbnZrcDZWQmlhNzVramd6TnNKWEdTdnEzU29GaHlWNFVFMUlOcTRadTZ5R2VMREkrQkZmWHdTMmJQUDBTcFY4RDRaclZjbE5zN0d1Ym1NV0RGQlFmeERZczd6eEtGL2FkdDBxKzE3Y2pxTDc1QTBkTFp6MFRwWm9ERjkwaDVrcDRqVTBCaDNIUk44Nmk1ZXZpY2VpYXNyWlJuZ1c0OHhkVmJiMTdjcDdBUWxEdUM1T1lWOEtTZGFhN0xMUHIzOXRYL2JBa0xJLzhld2NBVzdOdkVKQUpsdkZKTCswVzAxOE9KbFBIaURPRExlL2xRUzk3aHhveGJwdmdjWk9DcERhekxJVWVZREtFUElKUU84TXhRWnFaQUNBRjVKN01WbnFuT25XYWFCMG5abHVhanRsak1tOXB4a1p1cVlOdnN1MXFLOElKVGM4T3JtMU5idWdHRVpRZjYxUEhnc1h3dnk3dW1td1hBR1ZGYi9XcEVGK01sQndmV1JxNEVjYjEySHp5Z24vYUhkMElPN2NkZzBTZmxJQkhSMjB3TjZZZnI4WG02SGxaakZNd0wreUl4dFBXekQ0VGFxMXp4KzdnQklaeWZwYzdzOWNHUTI0amtoeG9NL2dQMVZsNXRMbHJ5aWhmYjZzUC9XWmpreUl5aEtvdDI4UWRPeGtpUzlWSVZ5bmJCY1VvcUtnTGRvTWJRSFVUMFUvZTBJa0kwVlVqOTAzdHFCaTRuajRmQllCVmR0YU1kVWFRVWVLNmpWL0kxdEdRUkFBanFnRDlmMFh3aFNWakpNZEx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQVg2cG9JR0VPd0RpY0x4VHBiczdpZC9kWFl5WHozb29xcUQ0WGNMajBjdyt0S2tmOWdQd21oSFpRK1VoUnpkRnlCOHExY1lMN3BqeFBPZ3BHQVZGY1RmZEREdVpYOFlhU3BRNXhTMTVtam9OTlhkZWJCVFVpaWVuYlV4S2ZIOXllYndMUTE4SmdDL0RaRFE1WGFEOEZWSFh2YjQvTXlKY0FSeS81TlB0T0U5cm9xSjJ6dmNQVXRrTWM3Vk5nVHpQb0Uxdm5UTUJiRzBUQW5HMitTQTliNXJoaWs0MnR5RUVEY2t2MDZuWUJmblo1WWJTWlgvT2tpRldqMHpjNUF0TFpEVFJoLzVTRlNZTmtualhVSzB1Z0FSU3BVT0d5SVJmQlNIOXU2SmJ5dUlCVjdFNEg3aWRJTjVNak5QaGg5d3VmeC9P',
    'FedAuth1': 'VGlwUjBRV0hZaGJMUStTR0VFbSt3dnpQcHZGdEtYWFFSdzdDQzVtYnVJbk92dmc4SXdieEdBdTlCOHFYMTNuYmFOS0ZZR3ZTRlA0dWsvbVJCNEk2blRUbWZUNVk2cFJXMGl5NG5pMTEvcXk2OHRrYkwrYkRmU09qd0dyb0JiMXRVdTZWbTBLSlNNK0JzaTdxTWkzVWFTS0I5ZGZsVE96NWNTa0Q4aGFvZktIdnRWQnZnb25CZStBLzFObWpqaFRsTHVORndIbkpVYTE4dy92RnZ0MnZIb21JY1pkdVo0N3Y0MlVoRTB5aXI4UElNTjRHeFdYOEdNYzc0SGRlTVVyUTNmb1oyay9wcHpJSjFmU1NwMElycEhLazNPLzRVa2U1Njd1NTdSdHJVeWZTcXZrd0ZMOUFoZjdPZDZHVHFiU3ZjSkgrcE8rdGJibHo5UW9PdlFOalQ5NWMvcFowZnRkNmliVlFtYmlyUUFnQUF4amdCTWtZd2FPdTBIWHM1NDJ6ak8zeE1qNlB0Y29LQzQ2eGw0K0tkclNnWlJKeWt1UXVsYnJmYnRkaE00aXM0c242NSszVDVtc25ZMFgwWkVBNUI0WnFCR1VzeUJDNUgyS2VkS0Y4SHc2SEFDR1BIdFpCWHVOYkpMR0txeVNtcHNCcmZ4RDlsdnNGMFh1bTVzVjRldkJrTW84NTgvdk1pYlM5Mm5SY29pVkxYeHoxWEg3OFZ2R3p6OVYweVdOODB3endQVmZwVVZRUSt4c1BXMVlTTEt5TWkyeUhiekVwNFdHZDAzeUduc3p0ZFFxcU0wYytPbnpORVRabzZqWE80VUNKTW90TFlYdFFhU25OUDhUdnFSamcwRm1Qd1hyQ2JQRTRENDNWajNINDJKTXpjWUIvcE1hUXFoeTRGMjE2b0Nnb0FrekJ0c0plZlJxb0NvZFphOTk4b0tNc2xZdXNibytKOSt1WUpaNTZZWWIyT3Z6bEZzaUJaNEVQU2psSU1MU01Lcm9QUHFkL3BnLzRJd0g1MWF6UVV2SEVzRitnVDkrZm9KK3IvSWNBNGVsbHZGSHZtN2thSGkrYlpBQjYxQ3NpSC9QeXBUS2IrUEtHc2wrTUgwcEF3bUp5WTdKZmJTczdQL3c2VW9TQU5obldIRnloNWJrMGw5Y1Juc1RDL2dwQzI1b0haQXBwNC9sdi9xaldIU3BYT1FGTlEzOGxVN2IrME5RVWtIWUJTL3owVDB6N3haUkphNk1nM3VBVmFERkN2TDZCc2NtdGhoZGErWkoxN3lIbjVleEdtcElJWk5nUEgwSW5kUkx0Y3lYSkxXTk5MazNuNmVJTW5MNThybUpla2FzZFZSSzZpbUxsUktUZTVOdEM2bzFodjAva1BTc1BHN1h1L1k4aThzenlBcmdxSDBpSk53WmFXYWFXSXRxdUJXVDgxRGtpUy9zTjBCNFI4WTJYYTE0c2lYRUZvejZFeEhSazczbTVtRXE0MFB2V0grOWNTcHRhZURBRlJvOU5sclhCUHlhQXFUNkFQWkFlT0RwNENkSnFiemwwZThmWU9UU0Z4ekpXQklSZ2pObjk5bllzRlJZMWdaU05iZkdkdVZrYzRYVldEbzE0clA1K3B4V3FobW1jMzFoTmkvSm1jeG1seTZCTGVjS052QmxBeUw1aVUwQjlia1VoQUFrTzVISGV3dFRuWFY0d1BWalRhdE5DZjdJYmdHOXE3UENGcS9jeDR4ZVFQQkNiaEZZcmFXbUxFRzM0QXdDZGs8L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==',
    '.BLSIAUTH_711': '68C8F9B342F0E1553D248D5117A66F43A346EC941863852CE297B99CCEE71B61B19E2AC27E83654552307D73E953AC74F4CED8AEBF0BCC7DD7ACCA61CC3C8D7CA6FD21E1C3B32D442EFA11908AFF57967992A5AE9CE2344041B835867DF93723A77B21C395B1434A1D92499600D25E83D9C18F9815B431B81CB1286B2C76F9A872FED2D5E957D714F8074EC10C4C6815BA3F9D39E4449D3468E395588526304FCD17D49F08FE04E6BF4E9CD1A6D71993CB812CD0A8A65C8029256B03AA4B05385403A4D0D33C68307C5893C56125B8FF25613FBD30F9D38ECDA89D3074D7E67D1078A63C3D3B036D1B80993B39F1AC6C8C03D904178CD68401D59F5B48EC3BB84B3916059F906B95EB64AF0AFB6E270F35A7E77684BBDBE7CF46EE88285965517AAC3BC563306DE0E800AC523BBE37DE1B720E923A1AF53D8B3E9852F7FF18919DB28D5CBB49F87CC1021DB50C028C85BD222EA6954D290B2E44AD96239952C0B6A1142E',
    '.MIXEDAUTH': '262FEBA0671DDA119A4754C4F6852C5310EF4A97508B4942CD1FC86AF8698D433B74BCEBD24057E64820E7FB37C20D0E0FC6C88DA6C55792D1379B1BAD4EF71793F0EA7281EED064CBB3F9DA28F679F33C0CFA37BBFC7C4FBB04AE9D8C8B0ED1734FE9A430EF7BAEF182AE924D5619F3538422FAF715DA32BAEF5D59CEF51A3CBF8E9B6D40A3F1BF663275AC4DFE8ACBB6DDC27BE4A68BBB5A76CB4EDBFC5A38020EDC689C2B8615C79535D0F5BD1DEF252B40DB2E8D95522EFC684B13C7A5A93188DE07AAA015656875194666697B3C1545810C664D13ADBA1F57A514CE7F9BED9BF347843807784B5421A495F9E4F11D7EBAE4915FB2FA55A010F7FD3BD9382229881F7618D7D37CC8E55BFFA64EDCED3C61B96A2BB1E734901D9AB9BBA1107D9D8BC9E2B478F72D2E1B945599BD61C80121411C91117112C39D01C253F97862729402',
    }
    headers = {
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        # 'Cookie': 'BLSIAPPEN=!pKMQ5kF0em2j/9NmiOBa4m4YLrxynIpKzfyVAd0DtOfeer+MbX5DspFueFUEZba2rKfq/EWPQ0sfow==; __AntiXsrfToken=9f1ed8ac955d48c287beb6e63c79adbf; __RequestVerificationToken=7yi_-s_GnXiARdXGXYlaDOYplhVcLzd8K9qm5mRbiOdXom3wku3gcIZMFkvx8_LvCNnvIYIPl2DyYFnvT3vkhWEY9P81; ASP.NET_SessionId=xdffdxy2axdhkimzfb1lmmmr; FedAuth=77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il80NTg3NGI1Zi1iMGNhLTRhZTUtODFkMS0xZmZiN2ZmYTNkOTctQjYzODlDQkZCNEE1RTUxM0NDMDBFNEY4MjVFRTMzNTYiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6MGZiYzk0MDMtNzU5Mi00ZDZjLWJmZTAtOGU3ZjY5NGZkNGFiPC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFLblNLbFhEbjQ5M3VRTnF3MjFEZzgxUlVwSEhDMEpMejJiTzNTN0s0dXA2b2RzbzREM01TblgzZlpkbGo4NmlyVGo1ZUV4NDRQbUdKZFh6d3BPYVFkT0lkeTMvbzZRT2t3QVNHNEZMb1NMVHVJVk5hcDRmUVQrUjMxVTJzRzhLeEdPNFFPQzJLSC9MeFk1eU1Sa2owRVdqc01SdWtjcWxWS09FTDhLVktxRjFGVnZnN1V6YzFUd0s5UVZLZGI2UnpEdlVvT0huQzB3bDBqc243c2lVNUYvRktxQVBOMGZHZXBFYkUwTDkxcm5TOXIyN2dOMnJTY04wdFJ2VUc5UndEZGZpa20yaUpDWXJmUGZTUy85ZFZXV3dvbkhoOEFySGJHWTB2dWU5eWUwRFFkcVpGcENZSHdSY0hWSnZadnFRK09qN2RzSXFISlZhaTdOaEpOeGo0M2ZnTGNOVmtma1g1NjdUWVZaL3RzNDU3TjFpUmxxM3RGWDYxZ2VpV21TTlFjbVkwTWFkOFFkZzRwUUNBNlV2TGVkS2dQL3MwK3pxT2xqSnA0dk9EM0JCYWdGVVcyYlJBZ0RMRW51aEFZbDFmMU9PdEdFdThVZFFoaE1kNzFmNWJLTlFkazBlOFRWUG9zQlAza3A2blY4VExVc1A2NCtrVU41SzlPcVV3d2k1QkE1K3RhMkUvcW1ZSDRIcUxEM3NLT0UxY21sNjM4dFU5dFpsYk1wcmdNMVBiRnVZMUJsR3ZQUmR1T3VSalJpams3OFcrQWdIQlJFY05aeWZJVExDRlYzWHJ4SHhuVGx4UStnRlU3a3l0a2lnNUhDNkVNYzUxdlNKYVdtUmhDNXJvclhBL1B5NGdWVjNER2dMSFRDaWNHS3E1L3E0OXA2c1o0WE1MaERPMjNLOEx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQUtMS3Z2TWs5dFhNT3RDM2dJSzNFWFlTWEpEV1puZFkyVVpySnBYTklEbmtGQ0MzazdUdnlnTURXZDRnOHRqNlN5Sm84ZFdyRjhPdURPSDZNZnZ5RHdISWQzREdEVHVLMGI5M3NRVVRoaEFsNmd2ZnNuUllIbkNBMDEzbzRmVkVZbmlnUjhKTDNNNFgvRSt5TXpVbVh6ejFkelMwYTNsa05GN1NCSzBUV2pHa0RzQXRvTDVxc2RPeDhQWEJOQitaU0hqWGZKZjhISGh3OHh4bXo3ZnB6WktpZmdFTHpLSllkZDY1NEJVeEJGN0xPZWJHZ0hUa0N6ZCt6NTE1SDV2dFgyNWRSUkhWa25MWGptNllUYzA2SlM5aHFuSmpHNTFCRThyNjlUbVlYT011cmZNSFpwTkFOUTlQMGU3SldOSlZMNm9V; FedAuth1=MklseDdSc0kxNkVDQ3VVVkw2N0o3SGxvT3pkNTRxU2ROTkVqUkphUGpnOEpQb1hOcGtkTTNLOGF1VzhlYzhoY291bXYzZlplVFpSMGZDTERDbW4rRWRxdGlWVGZFb0JKMWtndDZuZFBlUW5acVljamFQbDRNbVljVmxjM0ErNEloUTUwSCt0ZVB2dXZNY3lyUWt2RHp6RGdNMkxsbEN5ZjJqL2ppNkhwYVpqVXIzRFF3UWs0TWVmNEJTbVFkbVN4TWFxYmZkYk5nczFWUktCbXlHTWp5a2MyOWFlSDFVaTMvLzBNSjY0NDJxSWw3S0FpVVRveVNyT3RxOFphV2RlcElTZWh4ekVkdzEwck1mSUdYK3dTdis0ZzFzN1I3YzZJeXZtUjl4WnV5SnZLOERJOE1vVEhDNEcwSUhmT1ZOYXdteVJWcGhob1pGbGptZWd4SVM5b0VQS2dNY0pObXpGV2srekx4eGFqUUFnQUEzRTN0MmRNWDNJUG1FSUE4eEtPVFlSZzNlb3pSeFZuN1c0Z05KeFdYR2VzQzlZTWxYbE9ubExWTVJZN081c0Zuc1VWZHlkbkdTZDFHSFUxQnpXWjdXTXA1MStSOVVxWmNzWHducWdrYy83VmdxcEtBbWFYcEhWM3k4N1d3V0NyLzk0KzdQdExjcjdrOXA0elVVaDBHWGZMejNQOHlhS1QzU0Fwc0R0Yi9FaVpZU1Zra01oYmVaUkk1aEU2U0lIUE5aMkk1Y3YxSWdTd3dZaTg0V0tnMHQ1dklWRFZPUmNJSGQyWGlmcUx1dTdqYklCeWdlTFVRY3pXSTZGWkZ0Z1V3NUgwZEtiajN4b2JIU3hwNkp3MDJSUEhoaXlLN0NHckE5dDdKa1BzOG84UElDeWdvTjN1QXo5Y0tQSjRtbXNKYlgwTkRUdWJuKzBPU1VtSFg4RWgvdE9NMzB2QXdFcmZic1VnRFNVTTBIK3FPeFA3QzA3ZGc3UHhURXRHUENiYVlqamlRSE4wbEFNZDJmbitLTkFCWC8rb2pzWkxaZ0pJajRTU2ZiTXZOV042cXpWZ2ZyT0w1RWx0RDc4ODdTU0I1L01ZaExySzFhRnhtSC9uMWY3WVlwTUxTdHBkUjhJZU5LRDR4ZWtydG4xZy82dmxGZkdjSUhMVncra09yL2RtVUprZzYzT3dtT1Z6ZTBINkxhejZXUUFpYmZ6QkxNclorYzY1b2c0M0w2YnZic3VMWjdXSUhxZ2I0UHZUZVRaQmwyZlFwV3RORnJ5TENMOXhzb3NaMWpzMzZvVEp4Ym9qMCtZVjF0VkxrMlBSSEt3bGQ2Y2k2QVVrMXArMm5MTGY2RmwxTXhQaWVYUXNmbTZ2WFVRa1l1MTlwaVlwR1Z3LzA1SDRFQ1VLMDNyb1ZRY0pieGE5MGZjNDllWEcvak4vbEk5YXI5N1NtVnJNbjNWTUdubU5XWkVoQzVNS2hQRUZ6eHJsRVphdFpnVnltam51RGV1VVp2T0NZQlBSRFR3L0dBRjZwR1pOVkF4UDlvMmdjTmsxMFMweUs3U2NIWXcxSk84bi9qYnpWYUllTzBBR0NaVkszbTlHN3J4YU9HZndpSlhsOThFd0o1cllNMEdzWHBlb3hNY2dxOFRoR3NLK0NaL0ZMT0lKRHZ2OXB4Z1NMYmEyVnRoSW1TR0lXbEo4YVZQeXlGMGpUcDFLbmpzNWM0NE9LYW1PVVdzbzlhaUo0QWM2T3A4dTcxVE55anljcGdVSm5kTWFmL1FtUDl3Mnk8L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==; .BLSIAUTH_711=C70770D1BE8F0A839B8D46A9C06AAF5A1E89199BE7085B7DDB1D280D0657127C059AF6FB25BFF1A80D1EC322329ED4E3EC60DE21F00A35E20B0577137B81BFADBA56B20F74D2CEAD8BC1F9E5BAC84E40F953C1975F549F6635F7081BF78AD4DE22E632D2620F680287C17756B36C6C19B55CD225C2D769845E78898E72E204A9F45C5549536626E7FAA80F418A83FC4CEA386A6D44C0F25F5E582F85004DBD53EEEE0648CA4FFC6026183D20FE202E15A8D9867576DFC8BB9C26020F879C60B30AA8EAC0928A5C2258C35B17E8251A76A191744CFBFA57EF9491B8C617C1AD23D42DE9D1F9546EDC1C0CB2FFC772A453E42B5B4981EA453D4A4C1A2DB0EBCC96C9035335433667F3455121F480A9A02147F6D689AFB7BCA829B1D91B3B331BF4E51EC919A265C2227C5484B7BE43CCB778F21317349F7CA61865C4AD4F708128AC5DE584F51D5DEC15049BB6B4F4BB423ACA1C547312BDE7D5282FF90E0E22EBF29B8B05; .MIXEDAUTH=684DFA8A2E65760C137C322B35916BE99E94AF261C69DB007F814915D069989B904C399DAC5DAD1DA7FD215BAAAA5B7087EBCF4DE44BAD953D2A5CCC85346EA4434BCF4B4693B2780C032B921E4F1A5F98A5DFC18873C07BFAA260D265D2B231FC285F8BB8BE8FCACD9E95B2EC2007F866F888DBDF0093752D7FDB10C66B93B4F416E9EED319ADE8B3B409085FD379C953B9D0EBBC93ED3DBA2B5FDDD793F2F45C483BAF6EE90EE69B08FE961AA784140EC4A6E7F4550A7FA30FC5EE0398444E991C8BD1D5F5C62EB3CB38F7714F2371A80442B75FB799A9D48E99DB4FA00B19A9A2BD93EED3769ABD4A41E671DA2C58F0F67677E9B265F1CC454D2393C16DC5BFE67C2AC0A3AD8AFA007119DE0B59E958615D8C89DA0D7D030B0A62F0211B3973FECC9E9B6404C78C40CCADD7EC5C637E05F061F62CE5733505A1E4AAA8AD4E05E76932',
        'Referer': 'https://hyatthotels.us2.blackline.com/home',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'X-NewRelic-ID': 'VwAAU1VTCBAFUlRVDgABVVQ=',
        'X-Requested-With': 'XMLHttpRequest',
        'newrelic': 'eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjM2NzIzMDAiLCJhcCI6IjYwMTQzMzY1OSIsImlkIjoiZWVjN2FhMmUyMTBkY2M0OSIsInRyIjoiYzY2YzIzN2RkYzRjODhlNDg0MGVkZDZhMmNkNmY2NGQiLCJ0aSI6MTcwNjc1NjQ0MDc3MSwidGsiOiIzODkzNzkzIn19',
        'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
        'traceparent': '00-c66c237ddc4c88e4840edd6a2cd6f64d-eec7aa2e210dcc49-01',
        'tracestate': '3893793@nr=0-1-3672300-601433659-eec7aa2e210dcc49----1706756440771',
    }

    response = session.head('https://hyatthotels.us2.blackline.com/keep-alive', cookies=cookies, headers=headers)
    if response.status_code==200:
        pass
    else:
        sys.exit(1)
        
    
def process_row(row, headers, cookies, session,periodId):
            # if index >= start_index:
                # response = session.head('https://hyatthotels.us2.blackline.com/keep-alive', headers=headers,allow_redirects=False,)
                # if response.status_code==200:
                #     pass
                # else:
                #     sys.exit(1)               
                support_files=0
                errors=False          
                # sp.text=f"Processing Period: {month_name}, {year} {math.ceil((index/total_records)*100)}% complete"
                # entityCode = row['entityCode']
                # accountName = row['accountName']
                reconciliationId = row['reconciliationId']
                # outputDir = f"{periodPath}/{entityCode}/{accountName}/{reconciliationId}"
                outputDir,filename = getdirectory(row,periodId)
                url = f'{base_url}/account/reconciliation/{reconciliationId}'
                html_content = ""
                # logging.info(url)
                response = session.get(url,headers=headers,cookies=cookies,allow_redirects=False,)
                # print(response.text)
                # Check if the request was successful (status code 200)
                if response.status_code == 200:
                    # Get the HTML content from the response            

                    html_content = response.text
                else:
                    print(response.status_code)
                    errors=True
                    
                # Parse the HTML content with BeautifulSoup
                soup = BeautifulSoup(html_content, 'html.parser')
                # Find the anchor element by its id
                # logging.info(soup)

                anchor_element=soup.find("a", id="ctl00_ctl00_contentBody_cphMain_SaveCertifyButtons1_PrinterFriendlyLink")
                # logging.info(anchor_element)
                # anchor_element= getMainDoc(url)
                # print(anchor_element)
                # Check if the anchor element was found
                if anchor_element:
                    # Get the href attribute value
                    # logging.info('checkpoint 1')

                    href = anchor_element.get("href")
                    # Make a request to download the page
                    response = session.get(href ,headers=headers,cookies=cookies)
                    soup = BeautifulSoup(response.content, 'html.parser')  # You can use 'html.parser' as well
                    # Check if the request was successful (status code 200)
                    if response.status_code == 200:
                        logging.debug(f" Processing Reconciliation Id {reconciliationId}. ")

                        # output_folder = f"Documents/{accountname}/{id}"
                        os.makedirs(outputDir, exist_ok=True)

                        # Extract the filename from the URL
                        # filename = os.path.basename(f"{reconciliationId}.html")

                        
                        # Save the HTML content to the output folder
                        with open(os.path.join(outputDir, filename), 'wb') as file:
                            file.write(response.content)
                        try:
                            location_dfs =  getfileElements(soup)
                            support_files=len(location_dfs)
                            directory_path = f"{outputDir}"
                            if support_files>0:
                                for href in location_dfs:
                                    full_url = href.replace("../..", base_url)
                                try:
                                    # Ensure the save directory exists (adjust this line if running on Windows)
                                    os.makedirs(directory_path, exist_ok=True)

                                    response = session.get(full_url, headers=headers,cookies=cookies,allow_redirects=False)

                                    # Check if the request was successful
                                    if response.status_code == 200:
                                        # Get the filename from the Content-Disposition header
                                        # logging.info(response.headers)
                                        content_disposition = response.headers.get('Content-Disposition')
                                        logging.debug(content_disposition)
                                        if content_disposition:
                                            # Extract the filename from the header
                                            sfilename = content_disposition.split('filename=')[1]
                                            if sfilename.startswith('"') or sfilename.startswith("'"):
                                                sfilename = sfilename[1:-1]  # Strip quotes
                                            sfilename = unquote(sfilename)  # Decode URL-encoded characters in the filename
                                        else:
                                            sfilename = "default_filename.ext"  # Use a default filename or generate dynamically
                                        logging.debug("filenames: %s", sfilename)
                                        # Save the content of the response to a file in the specified directory
                                        file_path = os.path.join(directory_path, sfilename)
                                        with open(file_path, 'wb') as file:
                                            file.write(response.content)
                                        logging.debug(f"File saved to {file_path}")
                                    else:
                                        print(f"Failed to download the file. Status code: {response.status_code}")
                                except Exception as e:
                                    # Print the exception message
                                    print(f"An error occurred: {str(e)}")

                        except IndexError as e:
                            logging.debug(f"<<< error with reconcilition ID: {reconciliationId} >>>")
                        logging.debug(f"> HTML page saved to file  {outputDir}/{filename}")
                    else:
                        logging.debug(f"<<< Failed to download the page: Status code {response.status_code} >>>")
                        errors=True
                else:
                    pass
                progress={'reconciliationId': reconciliationId, 'support_files': support_files, 'date_downloaded': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                return progress,errors

def process_sheet(session,row,sp,periodId):
    year = row.iloc[0]['Year']
    month_number = row.iloc[0]['MonthNumber']
    month_name = month_to_text(int(month_number))
    sp.text=f"Processing Period: {month_name}, {year}"
    periodPath=f"{base_path}/{config_data['source']['instance']}/Reconciliation_Sheets/{periodId}/"
    headers = {
        'Accept': 'application/json; version=2',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        'Content-Type': 'application/json',
        # 'Cookie': '__AntiXsrfToken=f083162b548949718c1bd194fe4609a9; BLSIAPPEN=!Uc7ijuI4fl4DiSJmiOBa4m4YLrxynGQBMy/yGJoBqSbR9232ER7BFktdzVQNo80nwuyUS4pBXIBo1w==; __RequestVerificationToken=LnOYZ5iGRTct5n39TiFrCJQF27k7dHFXDHqdKOCwT_hYjdFm6symBt0UrnIqN3bn0e9uDa6aOUz713RCjGrmSGIHYwo1; ASP.NET_SessionId=sse0q3qxa2mr5vapdk2eymoy; FedAuth=77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48U2VjdXJpdHlDb250ZXh0VG9rZW4gcDE6SWQ9Il8yNzY2ZWU3ZC0zMTM3LTQ5OTUtODg2YS0xYTkwYWJjMWExMGYtMTExRkFFQjhDNjg3MThCOTkyM0Q2Q0JENjAwRDQ5RDIiIHhtbG5zOnAxPSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIiB4bWxucz0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3Mtc3gvd3Mtc2VjdXJlY29udmVyc2F0aW9uLzIwMDUxMiI+PElkZW50aWZpZXI+dXJuOnV1aWQ6ZDljZWMzODQtYzg2My00MGJiLWE4MWItOTIyNzJkNDE3ZTg2PC9JZGVudGlmaWVyPjxDb29raWUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwNi8wNS9zZWN1cml0eSI+QUFJQUFJb3hxR2Z3anVKcWl6M1NxSmdiczJ3dnNYUG5TSEV5U0NjbFI4LzNXYVJ2SEFuTmdMTHpGanJaWlUyTDdBVHlzZFU0OG5zeC9ibnMzK2RFc1hkMnFhWGVHRmxkMTZ0VG1RQnRULzN6QXVMWFMyNVVTeDNwcmN3bWEzSUVHOG9aaWE1UG0yV3lnRURhbXpSWEIwdHRERWJDeEpXOFdXTWlRbWp1OG00bXZpN3RTTTJuQXNZejdsVDBxdHZHcHhTWUtaMmJVb1VTdjFzTXRCeTBrRjczTHl0TjVEOHBVWTJMY0szSmM2b2hwcWFQT3pwbHZYVm9EU3lHUHFMYmxQNWxQVGR3Mm9iTjBicXdqZk4rRllreDdJTzdHbVUzNUpZNVJxRXMrODI2c2NoWHBVbjJCeWE2ZFIyaWFndksyYXR3eDJZOUt1L2k5bmpGOGFHSThFQzBBZGpDY09FMVhXMTdDR0pVZFIzeVpCcnJzUDVKYWp3dysrWXhWcnZHU1FjSFVreEdGNnVGQnhwdXpuZmdFSE52bHB0UFlsNmpNbHVNYUJDOFhRSEJsdzNLYVpsWnZiUitXd3FqQk5mZWFyMlFIbmJDT1pmRDJGdElmSCtkY0grRmtFeExudmhUYzd1Y0U3UHFJOEM3YzdiekhjVmkxTlB1L0lER0I0YzNDUkRKcmFkeVcxZG1UMFF4c2haZW1NMS9PRTRmRjlTREZra3VXTHBFMzlwVGxscHVMUUdNQ0NranVGRGhGTjFYVWViOXRPTG04TFJFTEpZYVdCWld3MVZDY1djMmFMajg2Ym13TUVWZDFjbk5vcnQ1NjdUVVMzazRXdVFCem5WVE1SWjBCUkNUSUhSbzBjalBoZms0SnNoRFVTYmhPUllpR0FpMTVtWnVCQkdFSk51Mkx0clpkMjNwNldXb1c5b1lMZDhjRjBGbW1KTUF6QXMvSk0rRjU5eU1ZcjRBQWdBQWV3RXoxUFA4bUZUc1JnTVdGVWhGbVp2dFVTSGV5aS9lKzFQbkRUN1lkNnVLRE1BQTNWaVpORGQyZHdrWGVqL3lJNFFpRExjWjVtUU5CeUVjYldkemdBclg5QXhGN1F2TEY0VVZ0bU11SERGN3Q2WENrcTlleThEMXBzMzc4c1ppY04yRGJ3MUhudm9IQ01NcFJ4OTBqTGlaM1lRZnJFRHcrSWpHamFrK3lHWFhYSjNYODdlazRWR2h1M2Y4UWpnamdRVVI4M2Y4TnFVaDBQNVhBUlRTc01VQlNlZU96b3NSSnJZZUpjYWx0a3lXMVd4dEl1cmFlTEdITW5sb0F4RkF6Z3EwK2JETnJBWnAzT2gzOGdsMU1qd3dVTVkyWXBySU9NZVJucTRvWWU0NVNnMFkrNitGSFdyc2Jva3R5VktsMWZO; FedAuth1=dkY4UFBzTVVyb25oMmtFUnRGMUYvYTU5ZTFVWVlMNThBWVFacXIzNUJkTVhBYk9EWjZqTzVnVDFseWlUbmhZUWFOVmFxRERBVjRXcTUwRTJFQVVSMDMyd3prbUMyUHNWcjlIV2F0MEw0akxQQmRUKytwdWRGc0JLcGc5eG5CU0ZGSXRxU0RpVU9zN2E0NDVrTmNZTE12WFJCblNNR1BwZ0MvODZUOTZRSVBkcUEwYkk0UCtVaGh6bGhQN1U5UTUzQitmdTlzVzcrRkRlUlE3R04rbEt3VjR6Z21FK3NFUWE0Z2RrbmplM01qV01aemlaeHpaZExueVQySks3bVEwOUdqYUdHV2lQcmlCcG42TTNsdjl4aWRMblNDK01DMlJscmZ2OEVXZmN3eVdRK253WE1lZVhqV0VNRi92Mzd4R1lkZjBIRm9RODQwV1cwVTNkajFxbUpMUlI2MWtZcDJERjVXQ3lBRmtqUUFnQUFhamlVcXVFTHFocjVrSXNFemtUWGc3VzNUMlNXNlhkZXJMdGdoVE5lbys0SWtRRGFZSmplSmFONFpKQWQxRkNoK0Zydm9XajVuSmN6VVRKS3hHYThGODkrdGprMmxiRE11WFgxL2M3d01SZjRHcHpabDBlVG5nUU9qN3RNK20rclB5ZVVLZjh2bWxOa2NoNnJrU2tvbnU4aVc1S0lLaGZwQ2ZINDdxb0RuS1Z1NUloeEVlcG96UFRRQUN5dlJGRHhNTVhkUlBLWU1jVVZNSldCZ2lLUGxheUpDVDVuK0duZzJUMkFIbTdscUhHbW1vd0l1Rm54OXRDUWNIYVBrUTh1b0V6V1JYWmlLMmREbDA5Z0JwRmwvbWFFQzNiK1BhUWtiMis5YnNnRjRWL3VJRWNjblR6ajhrUXpKRHhvRzlPK2lzdGhqYk50ZmVZbjUyQXRrMGNWdkRkTGJFY2FjcVdOa1ZTN3RMcmhERlJBNitmWG53b2ZkRnZHOER1cnVaMHdYeVlCUC9uMG1VQnVCS1FQYkRmbnprZVpTWWpsRXVxcVVseklqVmttQ3R5NVdDdHZKUWlqOUhyZldrOCtpZHRESFVVRzBMbG5XMW9qb3hlS1d0b2hMdnJPY05TdDZCWjI4V01PSnpYOERYT0EzOU1KalI0c0pqWUl2cU1vWDJnVzRHTG83MWl4VFd3dW5Sbnd2b0tlT0pUM0didzJGTk14Q3lSYitoSGNuR3IzQi9sditDL0VJSFIzRGZKVnRsekJULzZ6ZlE2WkdnTzZlNUkxUTdsL2NKN2pBa3dHblpzVDNlNWdWeWdVdGRQK1ZvQUhRTEQvQlhRNTBhQk94T3R6dmtoMm1CUGR4OCtaQ0ZLYWwvaHo0SWsyNFRYaU8yY3FhUDg1dS8zN2llRllUOVg3eHhOdzFJcGJtNWFwTFFOcEVyWjIwVlJCdDU3SjlWcFJGeEtPaTFqdWQ1NG1kN3NZd2xnR1ZFWEl3cXR5VnlGUHlGVGErWVRHVi80bG5uWjN1b2IwN3g0S29WbDkrVXkyeHBWZCszS3Rlb29Ub1MxK0d0aG5kVTZaVldkTzkrSkVxR2FoNU50b3hWQkg1R2VsRGRNQVZCN2ZzY09QOEdCaDF6L0V6WE9GYWoycVlsSndsZ1JlMmIvbEhvQjJJY0V1c0FUUHg3b2pzZ2x3Vmo5L1Y0TUp5QWRSaXphaE41RXBYbkJJYnVtTnAxS3VQVUZuWUlkdGhvODBWaE5RblF1ZWUyOTgyRFRNYVRYOXIvT2o8L0Nvb2tpZT48L1NlY3VyaXR5Q29udGV4dFRva2VuPg==; .BLSIAUTH_711=10D8A2B90C0FB9F43DD3A1B21FF1E22A62F0F11F2CD0ACA90E314981156C5686D820EDC9A4C35429C7D9ACBCA4C40B9A7D4675ABAE8656CE61A24A15F7405DFF42DF90F77D5115F0B08FAAB50F8650D62A4D665F80E22C5A0C886F91496261D29A6C8499B3B2CBF31A22E498DC0E0851C2D23FAFCFDAE430961697D31B4EEE6C4D62CB7C8D027381E60050B7F5F6783420A1D3F137A895E4116D767FE66D555314541440E3EF42636BE98BCE4E174E1ADDF03C34EF0A513E12113F85A4A4C1A7DF04E826B758416F2B3F197F6E3B34B22BB391E50DD096213084A27A5237304EDB1B2C57406891662E039E35912E671FEDFD5F4F933885E0A1CA9456D89B7C92CD54491101339323DBBB6204F4BB85D191927E7828F46E3DB03E20CE84CD696E09429FDD7F6300E9FEF5EC2BD171365D5459D2FD959AA36CDD186C730E74789BD0341DFAC16846EC91E8FB4299077808009E5E4171CBA4E4C3DE8EF4EF1A9519F908641F; .MIXEDAUTH=778CC67C8B09BB76E64D0966970A287CE67F0CB10C343F3D7F939C1D8F0EF1BD12E7EA6745CA8561EFFB6CD9F89A84F1DE03F2E50F78E8AAA165A59ECEF834311BBF720FCF81D7B076F8238DB92805FEA6327CABFF9105D0D653FDA486D822B1BB89E999978F01C4EC3D3E158078B9155B758A9953637DE841B897E2975E5E357AF8CEEEF8917581F574F1ACA109A4E2AE05A3F8DF74277F3BCF03A0947B978AE611BB1385B1C17EE185D523AE5D47F49BF80E576377AAE28FDF64953720C6D6C76E784FCAA844361EE2164C1C3B338B31D3FCAF6761D3528E82EB6617E923E1B152A39D1F454A7D9804F488A42A1D7B2CDA91CBBE1D34155C847E085BB8D5A73CE3DDCB073E095FEA1D92F5A1CCA7D038AEB6CD910BB3C21ED0989D235F035F4576D416A8DAB42ACF08E804B4B7BF018B396BF2491ACDEF6C3B6879C789BB7990C3AC8D',
        'Origin': f'{base_url}',
        'Referer': f'{base_url}/Modules/Reconciliations/ExecGrid.aspx',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'X-NewRelic-ID': 'VwAAU1VTCBAFUlRVDgABVVQ=',
        'X-Request-Verification-Token': 'EUVdRv_-wyM213S3iPFjdxl0pTqQJRRzFNN_nPmECnaFMWJHBNL2jEUotDtDyKtVmVwtYLPFtGIJLkykcIU_1u8vbs01',
        'newrelic': 'eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjM2NzIzMDAiLCJhcCI6IjYwMTQzMzY1OSIsImlkIjoiYTVjZjFmZTNjMjg1NjAyZSIsInRyIjoiZmNjZTRmZmZjY2UxNDE4YTQ5NWJkYWMyYTE4ZTAwM2MiLCJ0aSI6MTcwNjEyODU3NTExNCwidGsiOiIzODkzNzkzIn19',
        'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Linux"',
        'traceparent': '00-fcce4fffcce1418a495bdac2a18e003c-a5cf1fe3c285602e-01',
        'tracestate': '3893793@nr=0-1-3672300-601433659-a5cf1fe3c285602e----1706128575114',
    }       

    tracking_file_path = f"{base_path}/{config_data['source']['instance']}/tracking"
    excel_file_path =f'{periodPath}/reconciliations.xlsx'
    sourceDf=readExcelFile(excel_file_path)
        # with open('restart.txt', 'r') as file:
    #     start_index = int(file.readline().strip())
    # for index, row in adjustedDf.iterrows():
    trackingDf = pd.read_csv(f"{tracking_file_path}/{periodId}.csv")
    trackingDf['reconciliationId'] = trackingDf['reconciliationId'].astype(str)
    a_filtered=sourceDf.drop_duplicates(subset=['reconciliationId'])
    # Perform an inner join to identify records with the same reconciliationId
    merged_df = a_filtered.merge(trackingDf, on='reconciliationId', how='left', indicator=True)
    b_filtered = merged_df[merged_df['_merge'] == 'left_only'].drop('_merge', axis=1)
    
    logging.info(f'{b_filtered.shape[0]} of records left out of {a_filtered.shape[0]} for Period {periodId}')

    with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
        # Submit tasks to the executor
        futures = [executor.submit(process_row, row2, headers, cookies,session,periodId) for index, row2 in b_filtered.iterrows()]

        # Wait for all tasks to complete
        for future in concurrent.futures.as_completed(futures):
            try:
                # Retrieve result (if any) and update the data_df or handle exceptions
                result = future.result()
                writeProgress(result[0],result[1],periodId)
                trackingDf = pd.read_csv(f"{tracking_file_path}/{periodId}.csv")
               
                completed = (trackingDf.drop_duplicates(subset=['reconciliationId']).shape[0]/sourceDf.drop_duplicates(subset=['reconciliationId']).shape[0])*100
                sp.text=f"Processing Period: {month_name}, {year} {round(completed, 2)}% Completed"
                # logging.info(f"Completed {round(completed, 2)}% of current Period {periodId}" )
            except Exception as exc:
                logging.error(f'Generated an exception: {exc}')


    pass

def getTotalRecords(session):
    json_data = {
        # 'filters': config_data['source']['sheetView']['filters'],
        'options': {
            'grouping': 'GLAccountsOnly',
        },
    }
    headers = {
        'Accept': 'application/json; version=2',
        'Accept-Language': 'en-US,en;q=0.9',
        }       
    logging.info('Getting Total')
    response = session.post(
        f'{base_url}/api/accountreconciliation/totals',
        cookies=cookies,
        headers=headers,
        json=json_data,
    )
    data = json.loads(response.content)
    # print(data)
    total_records = data['totalRecords']
    return total_records

def getSpreadSheets(session,row,sp):
    year = row.iloc[0]['Year']
    month_number = row.iloc[0]['MonthNumber']
    month_name = month_to_text(int(month_number))
    total_records=getTotalRecords(session)
    logging.info(f"Period: {month_name}, {year} has {total_records} records")
    sp.text=f"Processing Period: {month_name}, {year} totlrecords: {total_records}"
    periodPath=f"{base_path}/{config_data['source']['instance']}/Reconciliation_Sheets/"
    # api_call_and_print_dataframe(total_records,periodPath)
        # Create the "test" directory if it doesn't exist
    if not os.path.exists(periodPath):
        os.makedirs(periodPath)
    # if (start_index==0):
    # pageSize=config_data['source']['pageSize']
    # pages=math.ceil(total_records/pageSize)+1
    pageSize=total_records
    pages=1
    rdfs=[]
    # for x in range(1, pages):
    headers = {
        'Accept': 'application/json; version=2',
        'X-Request-Verification-Token': 'S1Blyz-LsHiTtkXz0Sl60EoC-3VNxxRqC5Ag2Go3teNOUPfIyckQJSq-ZYhFez4k-2HL9DFmwo2KKnKNcvOuDnTfPSI1',
        'Referer': '',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Content-Type': 'application/json',
    }        
    json_data = {
        'columns': config_data['source']['sheetView']['columns'],
        'pageSize': pageSize,
        'pageNumber': 1,
        'sort': [
            {
                'field': 'reconciliationId',
                'dir': 'asc',
            },
        ],
        'pageNumberEnd': 1,

        'options': {
            'grouping': 'GLAccountsOnly',
            'columnSet': 'GridActionStatuses',
            'includeTotalAvailableRecords': False,
            'includeTotalRecords': False,
        },
    }
    logging.info('getting spreadsheet')
    response = session.post(f'{base_url}/api/accountreconciliation', headers=headers, json=json_data,cookies=cookies)
    # print(response.status_code)

    if response.status_code == 200:
        # Flatten nested dictionaries using json_normalize
        # flattened_data = pd.json_normalize(response.json())

        # Extract the "rows" data from the response JSON
        rows_data = response.json().get("items", {}).get("rows", [])
        logging.info("processing spreadsheet information")
        # Create a DataFrame from the "rows" data
        df = pd.DataFrame(rows_data,dtype=str)
        # print(f"Writing file to {periodPath}")
        df.to_excel(f"{periodPath}/{period}.xlsx", index=False,header=True)
        # rdfs.append(df)
    
    # rdf= pd.concat(rdfs)
    # rdf.to_excel(f"{periodPath}/reconciliations.xlsx", index=False,header=True)
        
def main():
    logging.info('Starting')
    start_time = time.time()

    global cookies
    session = createSession()
    with yaspin(text="Executing Script", color="cyan") as sp:
        # # Now, read the starting index from 'restart.txt'
        # with open(restart_file_path, 'r') as file:
        #     start_index = int(file.readline().strip())
        # # Read cookies from the file
    
        # getPeriodList(session)
        with open('config/barnes.period.json', 'r') as file:
            data = json.load(file)
        
        # Create a DataFrame
        df = extract_data_to_dataframe(data)
        row = df[df['id'] == period]
        # getSpreadSheets(session,row,sp)
        # process_sheet(session,row,sp,period)
        getSpreadSheets(session,row,sp)

            # tracking_file_path = f"{base_path}/{config_data['source']['instance']}/tracking"
            # if not os.path.exists(tracking_file_path):
            #     # Create the directory
            #     os.makedirs(tracking_file_path)
            # # # Check if 'restart.txt' exists
            # if not os.path.exists(f"{tracking_file_path}/{x}.csv"):
            #     # If the file does not exist, create it and write '0'
            #     with open(f"{tracking_file_path}/{x}.csv", 'w') as file:
            #         file.write('reconciliationId,support_files,date_downloaded\n')
            # row = df[df['id'] == x]
            # process_sheet(session,row,sp,x)
        # # row=df.loc[4]
        # print(f" Year: {row.iloc[0]['Year']}")
        # Iterate through the years (e.g., 2023, 2022, etc.)
        # for index, row in df.iterrows():
            # You can access each column value like this
            #         
          
        # with ThreadPoolExecutor(max_workers=maxWorkerCount) as executor:
        #     # Submitting tasks to the executor
        #     futures = [executor.submit(process_row, row) for index, row in adjustedDf.iterrows()]

        #     # Waiting for all futures to complete (optional, if you need to wait for all tasks to complete)
        #     for future in futures:
        #         future.result()
    
    # Calculating and logging the execution duration
    end_time = time.time()
    duration = end_time - start_time
    days, remainder = divmod(duration, 86400)  # 86400 seconds in a day
    hours, remainder = divmod(remainder, 3600)  # 3600 seconds in an hour
    minutes, seconds = divmod(remainder, 60)    # 60 seconds in a minute

    
    logging.info(f'Total execution time: Duration: {int(days)} days, {int(hours)} hours, {int(minutes)} minutes, {int(seconds)} seconds')
    sp.write(f'Duration: {int(days)} days, {int(hours)} hours, {int(minutes)} minutes, {int(seconds)} seconds')

    sp.ok(f"✔ ")
      
if __name__ == "__main__":
    main()
    